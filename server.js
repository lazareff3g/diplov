// server.js - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –†–ê–°–®–ò–†–ï–ù–ù–û–ô –û–¢–õ–ê–î–ö–û–ô FAVORITES
const express = require('express');
const cors = require('cors');
const path = require('path');
const multer = require('multer');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 5000;

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: CORS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–ï–†–í–´–ú –∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
app.use(cors({
  origin: ['http://localhost:3000', 'http://127.0.0.1:3000'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Origin', 'X-Requested-With', 'Content-Type', 'Accept', 'Authorization']
}));

// –ë–∞–∑–æ–≤—ã–µ middleware
app.use(express.json());

// –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å CORS
app.use('/uploads', (req, res, next) => {
  // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  res.header('Cache-Control', 'public, max-age=31536000'); // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ –≥–æ–¥
  
  console.log(`üìÅ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞: ${req.originalUrl}`);
  next();
}, express.static(path.join(__dirname, 'uploads'), {
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  setHeaders: (res, filePath) => {
    res.set('Access-Control-Allow-Origin', '*');
    res.set('Cross-Origin-Resource-Policy', 'cross-origin'); // –î–û–ë–ê–í–õ–ï–ù–û –¥–ª—è CORP
    console.log(`‚úÖ –û—Ç–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª: ${filePath}`);
  }
}));

// –î–û–ë–ê–í–õ–ï–ù–ò–ï: Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.originalUrl}`);
  next();
});

// –ë–∞–∑–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
  res.json({ 
    message: 'Photo Locations API Server is working!',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

app.get('/test', (req, res) => {
  res.json({ 
    message: 'Test endpoint works!',
    timestamp: new Date().toISOString(),
    nodeVersion: process.version,
    environment: process.env.NODE_ENV || 'development',
    memoryUsage: process.memoryUsage()
  });
});

// –î–û–ë–ê–í–õ–ï–ù–ò–ï: –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
app.get('/test-image/:filename', (req, res) => {
  const fs = require('fs');
  const filepath = path.join(__dirname, 'uploads', 'profiles', req.params.filename);
  
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: ${filepath}`);
  
  if (fs.existsSync(filepath)) {
    const stats = fs.statSync(filepath);
    res.json({
      exists: true,
      path: filepath,
      size: stats.size,
      url: `/uploads/profiles/${req.params.filename}`,
      fullUrl: `http://localhost:${PORT}/uploads/profiles/${req.params.filename}`,
      modified: stats.mtime
    });
  } else {
    res.status(404).json({
      exists: false,
      path: filepath,
      message: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
    });
  }
});

// –î–û–ë–ê–í–õ–ï–ù–ò–ï: –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.get('/uploads/test', (req, res) => {
  const fs = require('fs');
  const uploadsPath = path.join(__dirname, 'uploads');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞–ø–∫–∏ –≤ uploads
    const profilesPath = path.join(uploadsPath, 'profiles');
    const photosPath = path.join(uploadsPath, 'photos');
    
    let profileFiles = [];
    let photoFiles = [];
    
    if (fs.existsSync(profilesPath)) {
      profileFiles = fs.readdirSync(profilesPath);
    }
    
    if (fs.existsSync(photosPath)) {
      photoFiles = fs.readdirSync(photosPath);
    }
    
    res.json({
      message: 'Uploads directory is accessible',
      uploadsPath,
      profiles: {
        path: profilesPath,
        files: profileFiles.slice(0, 10),
        totalFiles: profileFiles.length
      },
      photos: {
        path: photosPath,
        files: photoFiles.slice(0, 10),
        totalFiles: photoFiles.length
      },
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      message: 'Error reading uploads directory',
      error: error.message,
      uploadsPath
    });
  }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try {
  const authRoutes = require('./routes/authRoutes');
  app.use('/api/auth', authRoutes);
  console.log('‚úÖ Auth routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ authRoutes:', error.message);
}

try {
  const userRoutes = require('./routes/userRoutes');
  app.use('/api/users', userRoutes);
  console.log('‚úÖ User routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ userRoutes:', error.message);
}

try {
  const locationRoutes = require('./routes/locationRoutes');
  app.use('/api/locations', locationRoutes);
  console.log('‚úÖ Location routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ locationRoutes:', error.message);
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ categoryRoutes —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
try {
  const categoryRoutes = require('./routes/categoryRoutes');
  app.use('/api/categories', categoryRoutes);
  console.log('‚úÖ Category routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã categoryRoutes
  setTimeout(() => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å /api/categories...');
  }, 1000);
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ categoryRoutes:', error.message);
  console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  const fs = require('fs');
  const categoryRoutesPath = path.join(__dirname, 'routes', 'categoryRoutes.js');
  
  if (fs.existsSync(categoryRoutesPath)) {
    console.log('‚úÖ –§–∞–π–ª routes/categoryRoutes.js —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
  } else {
    console.error('‚ùå –§–∞–π–ª routes/categoryRoutes.js –ù–ï –ù–ê–ô–î–ï–ù!');
  }
}

// –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ù–æ–≤—ã–µ —Ä–æ—É—Ç—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
try {
  const reviewRoutes = require('./routes/reviewRoutes');
  app.use('/api/reviews', reviewRoutes);
  console.log('‚úÖ Review routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ reviewRoutes:', error.message);
}

try {
  const photoRoutes = require('./routes/photoRoutes');
  app.use('/api/photos', photoRoutes);
  console.log('‚úÖ Photo routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ photoRoutes:', error.message);
}

// –î–û–ë–ê–í–õ–ï–ù–û: Middleware –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ /api/favorites
app.use('/api/favorites', (req, res, next) => {
  console.log('üíñ –û–¢–õ–ê–î–ö–ê FAVORITES - –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å:');
  console.log('üíñ –û–¢–õ–ê–î–ö–ê - –ú–µ—Ç–æ–¥:', req.method);
  console.log('üíñ –û–¢–õ–ê–î–ö–ê - URL:', req.originalUrl);
  console.log('üíñ –û–¢–õ–ê–î–ö–ê - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', req.params);
  console.log('üíñ –û–¢–õ–ê–î–ö–ê - Query:', req.query);
  console.log('üíñ –û–¢–õ–ê–î–ö–ê - Body:', req.body);
  console.log('üíñ –û–¢–õ–ê–î–ö–ê - User:', req.user ? `ID: ${req.user.id}, Username: ${req.user.username}` : '–ù–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù');
  console.log('üíñ –û–¢–õ–ê–î–ö–ê - –í—Ä–µ–º—è:', new Date().toISOString());
  console.log('üíñ –û–¢–õ–ê–î–ö–ê - IP:', req.ip);
  console.log('üíñ –û–¢–õ–ê–î–ö–ê - User-Agent:', req.get('User-Agent'));
  next();
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ favoriteRoutes —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
try {
  const favoriteRoutes = require('./routes/favoriteRoutes');
  app.use('/api/favorites', favoriteRoutes);
  console.log('‚úÖ Favorite routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è favorites
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å /api/favorites...');
  console.log('üíñ Favorite routes –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤');
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã favoriteRoutes
  setTimeout(() => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã favorites —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...');
  }, 2000);
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –≤ favoriteRoutes:', error.message);
  console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏ favoriteRoutes:', error.stack);
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ favoriteRoutes
  const fs = require('fs');
  const favoriteRoutesPath = path.join(__dirname, 'routes', 'favoriteRoutes.js');
  
  if (fs.existsSync(favoriteRoutesPath)) {
    console.log('‚úÖ –§–∞–π–ª routes/favoriteRoutes.js —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const stats = fs.statSync(favoriteRoutesPath);
    console.log('üìÑ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ favoriteRoutes.js:', stats.size, '–±–∞–π—Ç');
    console.log('üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ:', stats.mtime);
  } else {
    console.error('‚ùå –§–∞–π–ª routes/favoriteRoutes.js –ù–ï –ù–ê–ô–î–ï–ù!');
  }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å–ª–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ api.js (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
try {
  const apiRoutes = require('./routes/api');
  app.use('/api', apiRoutes);
  console.log('‚úÖ API routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
} catch (error) {
  console.warn('‚ö†Ô∏è api.js –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏:', error.message);
}

// –î–û–ë–ê–í–õ–ï–ù–ò–ï: Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ multer
app.use((error, req, res, next) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ multer
  if (error instanceof multer.MulterError) {
    console.error('‚ùå Multer error:', error);
    
    switch (error.code) {
      case 'LIMIT_FILE_SIZE':
        return res.status(400).json({
          success: false,
          message: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB'
        });
      case 'LIMIT_FILE_COUNT':
        return res.status(400).json({
          success: false,
          message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤'
        });
      case 'LIMIT_UNEXPECTED_FILE':
        return res.status(400).json({
          success: false,
          message: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–ª–µ —Ñ–∞–π–ª–∞'
        });
      default:
        return res.status(400).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞'
        });
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
  if (error.message && error.message.includes('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')) {
    return res.status(400).json({
      success: false,
      message: error.message
    });
  }
  
  next(error);
});

// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('‚ùå Server error:', err.stack);
  
  // –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
  if (err.name === 'ValidationError') {
    return res.status(400).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
      error: err.message
    });
  }
  
  if (err.name === 'UnauthorizedError') {
    return res.status(401).json({
      success: false,
      message: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø',
      error: err.message
    });
  }
  
  if (err.code === 'ENOENT') {
    return res.status(404).json({
      success: false,
      message: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
      error: err.message
    });
  }
  
  res.status(500).json({
    success: false,
    message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    error: process.env.NODE_ENV === 'production' ? 'Internal Server Error' : err.message,
    timestamp: new Date().toISOString()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use('*', (req, res) => {
  console.log('‚ùå 404 - –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', req.originalUrl);
  res.status(404).json({
    success: false,
    message: `–ú–∞—Ä—à—Ä—É—Ç ${req.originalUrl} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
    timestamp: new Date().toISOString(),
    availableRoutes: [
      'GET /',
      'GET /test',
      'GET /uploads/test',
      'GET /test-image/:filename',
      'GET /uploads/profiles/:filename',
      'GET /uploads/photos/:filename',
      'POST /api/auth/register',
      'POST /api/auth/login',
      'GET /api/users/profile',
      'PUT /api/users/profile',
      'POST /api/users/profile/image',
      'GET /api/locations',
      'POST /api/locations',
      'GET /api/locations/nearby',
      'GET /api/locations/user/:userId',
      'GET /api/categories',
      'GET /api/categories/:id',
      'GET /api/reviews/location/:locationId',
      'POST /api/reviews',
      'GET /api/photos/location/:locationId',
      'POST /api/photos',
      'GET /api/favorites', // –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      'GET /api/favorites/check/:locationId',
      'POST /api/favorites',
      'DELETE /api/favorites/:locationId'
    ]
  });
});

// –î–û–ë–ê–í–õ–ï–ù–ò–ï: Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üõë SIGTERM –ø–æ–ª—É—á–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üõë SIGINT –ø–æ–ª—É—á–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üìç API Base: http://localhost:${PORT}/api`);
  console.log(`üìç Test: http://localhost:${PORT}/test`);
  console.log(`üìÅ Uploads: http://localhost:${PORT}/uploads`);
  console.log(`üìÅ Uploads Test: http://localhost:${PORT}/uploads/test`);
  console.log(`üñºÔ∏è Test Image: http://localhost:${PORT}/test-image/FILENAME`);
  console.log(`üìÇ Categories API: http://localhost:${PORT}/api/categories`);
  console.log(`üíñ Favorites API: http://localhost:${PORT}/api/favorites`); // –î–û–ë–ê–í–õ–ï–ù–û
  console.log(`üåç Environment: ${process.env.NODE_ENV || 'development'}`);
  
  // –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏ uploads
  const fs = require('fs');
  const uploadsPath = path.join(__dirname, 'uploads');
  
  if (!fs.existsSync(uploadsPath)) {
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ uploads...');
    fs.mkdirSync(uploadsPath, { recursive: true });
  }
  
  const profilesPath = path.join(uploadsPath, 'profiles');
  if (!fs.existsSync(profilesPath)) {
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ uploads/profiles...');
    fs.mkdirSync(profilesPath, { recursive: true });
  }
  
  // –î–û–ë–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–æ–∫–∞—Ü–∏–π
  const photosPath = path.join(uploadsPath, 'photos');
  if (!fs.existsSync(photosPath)) {
    console.log('üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ uploads/photos...');
    fs.mkdirSync(photosPath, { recursive: true });
  }
  
  console.log('‚úÖ –ü–∞–ø–∫–∏ uploads –≥–æ—Ç–æ–≤—ã');
  
  // –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
  try {
    const profileFiles = fs.readdirSync(profilesPath);
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${profileFiles.length} —Ñ–∞–π–ª–æ–≤ –≤ uploads/profiles`);
    if (profileFiles.length > 0) {
      console.log('üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã –ø—Ä–æ—Ñ–∏–ª–µ–π:', profileFiles.slice(-3));
    }
    
    // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ª–æ–∫–∞—Ü–∏–π
    const photoFiles = fs.readdirSync(photosPath);
    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${photoFiles.length} —Ñ–∞–π–ª–æ–≤ –≤ uploads/photos`);
    if (photoFiles.length > 0) {
      console.log('üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ª–æ–∫–∞—Ü–∏–π:', photoFiles.slice(-3));
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏ uploads:', error.message);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  try {
    const { pool } = require('./db');
    pool.query('SELECT NOW()', (err, result) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
      } else {
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞:', result.rows[0].now);
        
        // –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        pool.query(`
          SELECT table_name 
          FROM information_schema.tables 
          WHERE table_schema = 'public' 
          AND table_name IN ('locations', 'photos', 'reviews', 'favorites', 'categories')
        `, (err, result) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü:', err.message);
          } else {
            const tables = result.rows.map(row => row.table_name);
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tables);
            
            if (tables.includes('locations')) console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ locations —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            if (tables.includes('photos')) console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ photos —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            if (tables.includes('reviews')) console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ reviews —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            if (tables.includes('categories')) console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ categories —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            
            // –î–û–ë–ê–í–õ–ï–ù–û: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã favorites
            if (tables.includes('favorites')) {
              console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ favorites —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ favorites
              pool.query('SELECT COUNT(*) as count FROM favorites', (err, result) => {
                if (err) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ favorites:', err.message);
                } else {
                  console.log(`üíñ –í —Ç–∞–±–ª–∏—Ü–µ favorites ${result.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
                }
              });
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã favorites
              pool.query(`
                SELECT column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'favorites'
                ORDER BY ordinal_position
              `, (err, result) => {
                if (err) {
                  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã favorites:', err.message);
                } else {
                  console.log('üíñ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã favorites:', result.rows);
                }
              });
            } else {
              console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ favorites –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢!');
            }
          }
        });
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ë–î
        pool.query('SELECT COUNT(*) as count FROM categories', (err, result) => {
          if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', err.message);
          } else {
            console.log(`üìÇ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ${result.rows[0].count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
          }
        });
      }
    });
  } catch (dbError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', dbError.message);
  }
});
