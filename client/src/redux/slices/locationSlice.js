// client/src/redux/slices/locationSlice.js - –î–û–ë–ê–í–õ–Ø–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–£–Æ –§–£–ù–ö–¶–ò–Æ
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import locationService from '../../services/locationService';

// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ thunks...
export const fetchLocations = createAsyncThunk(
  'locations/fetchLocations',
  async (params, { rejectWithValue }) => {
    try {
      const response = await locationService.getLocations(params);
      return response;
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

export const fetchLocationById = createAsyncThunk(
  'locations/fetchLocationById',
  async (id, { rejectWithValue }) => {
    try {
      const response = await locationService.getLocationById(id);
      return response;
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

export const createLocation = createAsyncThunk(
  'locations/createLocation',
  async (locationData, { rejectWithValue, getState }) => {
    try {
      const { auth } = getState();
      const token = auth.token;
      
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }
      
      const response = await fetch('http://localhost:5000/api/locations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(locationData)
      });
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
      }
      
      const data = await response.json();
      return data.location || data;
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

// –î–û–ë–ê–í–õ–Ø–ï–ú: –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–π updateLocation thunk
export const updateLocation = createAsyncThunk(
  'locations/updateLocation',
  async ({ id, data }, { rejectWithValue, getState }) => {
    try {
      console.log('üîÑ Redux: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:', { id, data });
      
      const { auth } = getState();
      const token = auth.token;
      
      if (!token) {
        throw new Error('–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      }
      
      const response = await fetch(`http://localhost:5000/api/locations/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(data)
      });
      
      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', errorText);
        throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
      }
      
      const updatedLocation = await response.json();
      console.log('‚úÖ –õ–æ–∫–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedLocation);
      
      return updatedLocation;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateLocation thunk:', error);
      return rejectWithValue(error.message);
    }
  }
);

const initialState = {
  categories: [],
  error: null,
  loading: false,
  location: null,
  locations: [],
  filters: {
    search: '',
    category_id: '',
    best_time_of_day: '',
    best_season: '',
    accessibility: '',
    difficulty_level: '',
    permission_required: ''
  },
  currentPage: 1,
  totalPages: 1,
  creating: false,
  createError: null,
  updating: false, // –î–û–ë–ê–í–õ–Ø–ï–ú: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  updateError: null
};

const locationSlice = createSlice({
  name: 'locations',
  initialState,
  reducers: {
    clearLocation: (state) => {
      state.location = null;
    },
    setFilters: (state, action) => {
      state.filters = { ...state.filters, ...action.payload };
    },
    clearFilters: (state) => {
      state.filters = initialState.filters;
    },
    setCurrentPage: (state, action) => {
      state.currentPage = action.payload;
    },
    setTotalPages: (state, action) => {
      state.totalPages = action.payload;
    },
    clearError: (state) => {
      state.error = null;
      state.createError = null;
      state.updateError = null; // –î–û–ë–ê–í–õ–Ø–ï–ú: –æ—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    }
  },
  extraReducers: (builder) => {
    builder
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ fetchLocations
      .addCase(fetchLocations.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchLocations.fulfilled, (state, action) => {
        state.loading = false;
        state.locations = action.payload.locations || action.payload;
        state.totalPages = action.payload.pagination?.pages || 1;
        state.error = null;
      })
      .addCase(fetchLocations.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || action.error.message;
        state.locations = [];
      })
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ fetchLocationById
      .addCase(fetchLocationById.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchLocationById.fulfilled, (state, action) => {
        state.loading = false;
        state.location = action.payload;
        state.error = null;
      })
      .addCase(fetchLocationById.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload || action.error.message;
      })
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ createLocation
      .addCase(createLocation.pending, (state) => {
        state.creating = true;
        state.createError = null;
      })
      .addCase(createLocation.fulfilled, (state, action) => {
        state.creating = false;
        state.createError = null;
        state.locations.unshift(action.payload);
      })
      .addCase(createLocation.rejected, (state, action) => {
        state.creating = false;
        state.createError = action.payload || action.error.message;
      })
      
      // –î–û–ë–ê–í–õ–Ø–ï–ú: –û–±—Ä–∞–±–æ—Ç–∫–∞ updateLocation
      .addCase(updateLocation.pending, (state) => {
        state.updating = true;
        state.updateError = null;
        console.log('‚è≥ Redux: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞—á–∞–ª–æ—Å—å...');
      })
      .addCase(updateLocation.fulfilled, (state, action) => {
        state.updating = false;
        state.updateError = null;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ
        const index = state.locations.findIndex(loc => loc.id === action.payload.id);
        if (index !== -1) {
          state.locations[index] = action.payload;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        if (state.location && state.location.id === action.payload.id) {
          state.location = action.payload;
        }
        
        console.log('‚úÖ Redux: –õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏');
      })
      .addCase(updateLocation.rejected, (state, action) => {
        state.updating = false;
        state.updateError = action.payload || action.error.message;
        console.error('‚ùå Redux: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:', action.payload);
      });
  }
});

export const { 
  clearLocation, 
  setFilters, 
  clearFilters,
  setCurrentPage,
  setTotalPages,
  clearError
} = locationSlice.actions;

export default locationSlice.reducer;
