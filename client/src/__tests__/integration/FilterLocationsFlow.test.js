// src/__tests__/integration/FilterLocationsFlow.test.js
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import LocationFilter from '../../components/locations/LocationFilter';

// –ú–æ–∫–∏—Ä—É–µ–º react-icons/fa
jest.mock('react-icons/fa', () => ({
  FaSearch: () => <span data-testid="search-icon">üîç</span>
}));

// –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –º–æ–∫–∞
const setFiltersAction = { type: 'locations/setFilters' };

// –ú–æ–∫–∏—Ä—É–µ–º locationSlice
jest.mock('../../redux/slices/locationSlice', () => ({
  setFilters: () => setFiltersAction,
  clearFilters: () => ({ type: 'locations/clearFilters' })
}));

describe('Filter Locations Flow', () => {
  const mockStore = configureStore();
  let store;
  
  beforeEach(() => {
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–æ—Ä
    store = mockStore({
      locations: {
        filters: {
          search: '',
          category_id: '',
          best_time_of_day: '',
          best_season: '',
          accessibility: '',
          difficulty_level: '',
          permission_required: ''
        }
      }
    });
    
    // –ú–æ–∫–∏—Ä—É–µ–º dispatch
    store.dispatch = jest.fn(() => {
      // –í—ã–∑—ã–≤–∞–µ–º onFilterChange –ø—Ä–∏ –≤—ã–∑–æ–≤–µ dispatch
      // –≠—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç onFilterChange
      // –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Redux
      if (mockOnFilterChange) mockOnFilterChange();
      return Promise.resolve();
    });
  });
  
  let mockOnFilterChange;
  
  test('filtering locations with search and category', async () => {
    const mockCategories = [
      { id: 1, name: '–ü—Ä–∏—Ä–æ–¥–∞' },
      { id: 2, name: '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞' },
      { id: 3, name: '–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–µ–π–∑–∞–∂' }
    ];
    
    mockOnFilterChange = jest.fn();
    
    render(
      <Provider store={store}>
        <LocationFilter 
          categories={mockCategories} 
          onFilterChange={mockOnFilterChange} 
        />
      </Provider>
    );
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
    fireEvent.change(screen.getByPlaceholderText('–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é'), {
      target: { value: '–æ–∑–µ—Ä–æ' }
    });
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≤—ã–±–∏—Ä–∞–µ–º "–ü—Ä–∏—Ä–æ–¥–∞"
    const categorySelect = screen.getAllByRole('combobox')[0];
    fireEvent.change(categorySelect, {
      target: { value: '1' }
    });
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    fireEvent.click(screen.getByText('–ü—Ä–∏–º–µ–Ω–∏—Ç—å'));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ dispatch –±—ã–ª –≤—ã–∑–≤–∞–Ω
    expect(store.dispatch).toHaveBeenCalled();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ onFilterChange –±—ã–ª –≤—ã–∑–≤–∞–Ω
    expect(mockOnFilterChange).toHaveBeenCalled();
  });
});
