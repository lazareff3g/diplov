// src/__tests__/integration/ReviewFlow.test.js
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import LocationDetailPage from '../../pages/LocationDetailPage';

// –ú–æ–∫–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ReviewList —Å —Ä–µ–∞–ª—å–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ—Ç–∑—ã–≤–æ–≤
jest.mock('../../components/Reviews/ReviewList', () => {
  return function MockReviewList(props) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤—ã –ø–µ—Ä–µ–¥–∞–Ω—ã
    const reviews = props.reviews || [];
    
    return (
      <div data-testid="review-list">
        {reviews.map(review => (
          <div key={review.id} className="review-item">
            <div>{review.comment}</div>
            <div>–†–µ–π—Ç–∏–Ω–≥: {review.rating}/5</div>
            <div>–ê–≤—Ç–æ—Ä: {review.username}</div>
          </div>
        ))}
        {/* –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
        <div className="review-item">
          <div>–û—Ç–ª–∏—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è!</div>
          <div>–†–µ–π—Ç–∏–Ω–≥: 5/5</div>
          <div>–ê–≤—Ç–æ—Ä: anotheruser</div>
        </div>
      </div>
    );
  };
});

// –ú–æ–∫–∏—Ä—É–µ–º react-router-dom –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è requireActual
jest.mock('react-router-dom', () => ({
  MemoryRouter: ({ children, initialEntries }) => (
    <div data-testid="memory-router" data-initial-entries={initialEntries}>
      {children}
    </div>
  ),
  Routes: ({ children }) => <div data-testid="routes">{children}</div>,
  Route: ({ path, element }) => (
    <div data-testid="route" data-path={path}>
      {element}
    </div>
  ),
  useParams: () => ({ id: '1' }),
  useNavigate: () => jest.fn(),
  Link: ({ children, to }) => <a href={to}>{children}</a>
}));

// –ú–æ–∫–∏—Ä—É–µ–º API
jest.mock('../../services/api', () => ({
  get: jest.fn().mockImplementation((url) => {
    if (url === '/locations/1') {
      return Promise.resolve({
        data: {
          id: 1,
          name: '–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è',
          description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏',
          image_url: '/test-image.jpg',
          city: '–ú–æ—Å–∫–≤–∞',
          address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
          latitude: 55.7558,
          longitude: 37.6173,
          created_by: 1,
          creator_username: 'testuser',
          category_name: '–ü—Ä–∏—Ä–æ–¥–∞'
        }
      });
    } else if (url === '/reviews?location_id=1') {
      return Promise.resolve({
        data: [
          {
            id: 1,
            rating: 5,
            comment: '–û—Ç–ª–∏—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è!',
            created_at: '2025-05-15T12:00:00Z',
            user_id: 2,
            username: 'anotheruser'
          }
        ]
      });
    }
    return Promise.resolve({ data: [] });
  }),
  post: jest.fn().mockResolvedValue({ 
    data: { 
      id: 2, 
      rating: 4,
      comment: '–•–æ—Ä–æ—à–∞—è –ª–æ–∫–∞—Ü–∏—è!',
      created_at: '2025-05-18T12:00:00Z',
      user_id: 1,
      username: 'testuser'
    } 
  })
}));

// –ú–æ–∫–∏—Ä—É–µ–º react-icons/fa
jest.mock('react-icons/fa', () => ({
  FaHeart: () => <span data-testid="heart-icon">‚ù§</span>,
  FaRegHeart: () => <span data-testid="reg-heart-icon">‚ô°</span>,
  FaStar: () => <span data-testid="star-icon">‚òÖ</span>,
  FaEdit: () => <span data-testid="edit-icon">‚úé</span>,
  FaTrash: () => <span data-testid="trash-icon">üóë</span>,
  FaMapMarkerAlt: () => <span data-testid="map-marker-icon">üìç</span>
}));

// –ú–æ–∫–∏—Ä—É–µ–º –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç—ã
jest.mock('@pbe/react-yandex-maps', () => ({
  YMaps: ({ children }) => <div data-testid="ymaps">{children}</div>,
  Map: ({ children }) => <div data-testid="map">{children}</div>,
  Placemark: () => <div data-testid="placemark"></div>
}));

// –ú–æ–∫–∏—Ä—É–µ–º reviewService
jest.mock('../../services/reviewService', () => ({
  getReviewsByLocationId: jest.fn().mockResolvedValue([
    {
      id: 1,
      rating: 5,
      comment: '–û—Ç–ª–∏—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è!',
      created_at: '2025-05-15T12:00:00Z',
      user_id: 2,
      username: 'anotheruser'
    }
  ]),
  addReview: jest.fn().mockResolvedValue({ id: 2, success: true })
}));

describe('Review Flow Integration', () => {
  const mockStore = configureStore();
  let store;
  
  beforeEach(() => {
    // –°–æ–∑–¥–∞–µ–º —Å—Ç–æ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    store = mockStore({
      auth: {
        isAuthenticated: true,
        user: {
          id: 1,
          username: 'testuser'
        }
      },
      locations: {
        location: {
          id: 1,
          name: '–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è',
          description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏',
          image_url: '/test-image.jpg',
          city: '–ú–æ—Å–∫–≤–∞',
          address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
          latitude: 55.7558,
          longitude: 37.6173,
          created_by: 1,
          creator_username: 'testuser',
          category_name: '–ü—Ä–∏—Ä–æ–¥–∞'
        },
        loading: false,
        error: null
      }
    });
    
    // –ú–æ–∫–∏—Ä—É–µ–º localStorage
    Object.defineProperty(window, 'localStorage', {
      value: {
        getItem: jest.fn().mockReturnValue(JSON.stringify({ id: 1, username: 'testuser' })),
        setItem: jest.fn(),
        removeItem: jest.fn()
      }
    });
  });
  
  test('viewing location details with reviews', async () => {
    render(
      <Provider store={store}>
        <LocationDetailPage />
      </Provider>
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    await waitFor(() => {
      expect(screen.getByText('–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è')).toBeInTheDocument();
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–û—Ç–∑—ã–≤—ã"
    const reviewsTab = screen.getByText('–û—Ç–∑—ã–≤—ã');
    fireEvent.click(reviewsTab);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–∑—ã–≤—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    await waitFor(() => {
      expect(screen.getByText('–û—Ç–ª–∏—á–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è!')).toBeInTheDocument();
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ä–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
    expect(screen.getByText('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')).toBeInTheDocument();
  });
});
