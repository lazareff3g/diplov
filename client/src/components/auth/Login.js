const express = require('express');
const cors = require('cors');
const path = require('path');
const { Pool } = require('pg');
require('dotenv').config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express
const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  user: process.env.DB_USER || 'postgres',
  host: process.env.DB_HOST || 'localhost',
  database: process.env.DB_NAME || 'photo_locations',
  password: process.env.DB_PASSWORD || 'your_password',
  port: process.env.DB_PORT || 5432,
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
pool.query('SELECT NOW()', (err, res) => {
  if (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', err.stack);
  } else {
    console.log('PostgreSQL connected:', res.rows[0]);
  }
});

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
app.get('/', (req, res) => {
  res.send('API is running');
});

// –ò–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
const userRoutes = require('./routes/userRoutes');
const locationRoutes = require('./routes/locationRoutes');
const categoryRoutes = require('./routes/categoryRoutes');
const authRoutes = require('./routes/authRoutes');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api/auth', authRoutes);        // –î–æ–±–∞–≤–ª–µ–Ω auth –º–∞—Ä—à—Ä—É—Ç
app.use('/api/users', userRoutes);
app.use('/api/locations', locationRoutes);
app.use('/api/categories', categoryRoutes);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª api.js, –µ—Å–ª–∏ –¥–∞ - –ø–æ–¥–∫–ª—é—á–∞–µ–º
try {
  const apiRoutes = require('./routes/api');
  app.use('/api', apiRoutes);
  console.log('‚úÖ API routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
} catch (error) {
  console.log('‚ÑπÔ∏è –§–∞–π–ª routes/api.js –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('‚ùå Server error:', err.stack);
  res.status(500).json({
    message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!',
    error: process.env.NODE_ENV === 'production' ? {} : err.stack
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use('*', (req, res) => {
  res.status(404).json({
    message: `–ú–∞—Ä—à—Ä—É—Ç ${req.originalUrl} –Ω–µ –Ω–∞–π–¥–µ–Ω`
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üìç API endpoints:`);
  console.log(`   - Auth: http://localhost:${PORT}/api/auth`);
  console.log(`   - Users: http://localhost:${PORT}/api/users`);
  console.log(`   - Locations: http://localhost:${PORT}/api/locations`);
  console.log(`   - Categories: http://localhost:${PORT}/api/categories`);
});
