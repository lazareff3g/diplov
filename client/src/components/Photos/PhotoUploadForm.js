// src/components/Photos/PhotoUploadForm.js
import React, { useState } from 'react';
import { Card, Button, Alert, ProgressBar, Form } from 'react-bootstrap';
import { useSelector } from 'react-redux';

const PhotoUploadForm = ({ locationId, onUploadSuccess }) => {
  const [files, setFiles] = useState([]);
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);

  const { user } = useSelector(state => state.auth || { user: null });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
  const handleFileSelect = (e) => {
    const selectedFiles = Array.from(e.target.files);
    setFiles(selectedFiles);
    setError(null);
    setSuccess(false);
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  const handleUpload = async () => {
    if (files.length === 0) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
      return;
    }

    setUploading(true);
    setError(null);
    setUploadProgress(0);

    try {
      // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
      for (let i = 0; i <= 100; i += 10) {
        setUploadProgress(i);
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      setSuccess(true);
      setFiles([]);
      setUploadProgress(0);
      
      if (onUploadSuccess) {
        onUploadSuccess({ message: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã' });
      }

    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', err);
      setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π');
    } finally {
      setUploading(false);
    }
  };

  return (
    <Card className="photo-upload-form" data-testid="photo-upload-form">
      <Card.Header>
        <h5 className="mb-0">üì∏ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</h5>
      </Card.Header>
      <Card.Body>
        {/* –ü—Ä–æ—Å—Ç–æ–π input –¥–ª—è —Ñ–∞–π–ª–æ–≤ */}
        <Form.Group className="mb-3">
          <Form.Label>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:</Form.Label>
          <Form.Control
            type="file"
            multiple
            accept="image/*"
            onChange={handleFileSelect}
            data-testid="file-input"
          />
          <Form.Text className="text-muted">
            –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPEG, PNG, WebP. –ú–∞–∫—Å–∏–º—É–º 10MB –Ω–∞ —Ñ–∞–π–ª
          </Form.Text>
        </Form.Group>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        {error && (
          <Alert variant="danger" data-testid="error-message">
            {error}
          </Alert>
        )}

        {success && (
          <Alert variant="success" data-testid="success-message">
            –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!
          </Alert>
        )}

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ */}
        {uploading && (
          <div className="mb-3" data-testid="upload-progress">
            <div className="d-flex justify-content-between mb-1">
              <small>–ó–∞–≥—Ä—É–∑–∫–∞...</small>
              <small>{uploadProgress}%</small>
            </div>
            <ProgressBar now={uploadProgress} />
          </div>
        )}

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö */}
        {files.length > 0 && (
          <div className="mb-3" data-testid="selected-files">
            <p>–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: <strong>{files.length}</strong></p>
            <ul className="list-unstyled">
              {files.map((file, index) => (
                <li key={index} className="text-muted small">
                  {file.name} ({Math.round(file.size / 1024)} KB)
                </li>
              ))}
            </ul>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="d-flex justify-content-between">
          <Button
            variant="outline-secondary"
            onClick={() => setFiles([])}
            disabled={files.length === 0 || uploading}
          >
            –û—á–∏—Å—Ç–∏—Ç—å
          </Button>
          <Button
            variant="primary"
            onClick={handleUpload}
            disabled={files.length === 0 || uploading}
            data-testid="upload-button"
          >
            {uploading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : `–ó–∞–≥—Ä—É–∑–∏—Ç—å (${files.length})`}
          </Button>
        </div>
      </Card.Body>
    </Card>
  );
};

export default PhotoUploadForm;
