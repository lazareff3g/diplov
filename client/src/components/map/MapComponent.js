// client/src/components/map/MapComponent.js - –° –û–¢–õ–ê–î–ö–û–ô
import React, { useEffect, useRef, useState } from 'react';

const MapComponent = ({ 
  center = [55.751244, 37.618423],
  zoom = 10,
  height = '400px',
  onLocationSelect,
  selectedLocation,
  interactive = false
}) => {
  // üîç –î–û–ë–ê–í–õ–ï–ù–ê –û–¢–õ–ê–î–ö–ê API –ö–õ–Æ–ß–ï–ô:
  console.log('üîç DEBUGGING API KEYS:');
  console.log('Maps API Key:', process.env.REACT_APP_YANDEX_MAPS_API_KEY);
  console.log('Suggest API Key:', process.env.REACT_APP_YANDEX_SUGGEST_API_KEY);
  console.log('API URL:', process.env.REACT_APP_API_URL);
  console.log('All env vars:', process.env);

  const mapRef = useRef(null);
  const [map, setMap] = useState(null);
  const [placemark, setPlacemark] = useState(null);

  useEffect(() => {
    if (!mapRef.current) return;

    const initMap = () => {
      if (!window.ymaps) {
        const script = document.createElement('script');
        // –£–ü–†–û–©–ï–ù–ò–ï: –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π API –±–µ–∑ suggest
        script.src = `https://api-maps.yandex.ru/2.1/?apikey=${process.env.REACT_APP_YANDEX_MAPS_API_KEY}&lang=ru_RU`;
        
        // üîç –û–¢–õ–ê–î–ö–ê URL:
        console.log('üó∫Ô∏è Loading Yandex Maps with URL:', script.src);
        
        script.onload = () => {
          console.log('‚úÖ Yandex Maps API loaded successfully');
          window.ymaps.ready(createMap);
        };
        script.onerror = () => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps API');
        };
        document.head.appendChild(script);
      } else {
        console.log('‚ôªÔ∏è Yandex Maps API already loaded');
        window.ymaps.ready(createMap);
      }
    };

    const createMap = () => {
      try {
        console.log('üèóÔ∏è Creating map instance...');
        const mapInstance = new window.ymaps.Map(mapRef.current, {
          center: center,
          zoom: zoom,
          controls: ['zoomControl', 'geolocationControl']
        });

        if (interactive) {
          console.log('üîß Adding interactive features...');
          
          // –¢–û–õ–¨–ö–û –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ Yandex - –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö API
          const searchControl = new window.ymaps.control.SearchControl({
            options: {
              float: 'left',
              placeholderContent: '–ü–æ–∏—Å–∫ –º–µ—Å—Ç...',
              maxWidth: [200, 300],
              noPlacemark: false
            }
          });
          
          mapInstance.controls.add(searchControl);
          console.log('üîç Search control added');

          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
          searchControl.events.add('resultselect', (e) => {
            console.log('üéØ Search result selected');
            const index = e.get('index');
            searchControl.getResult(index).then((result) => {
              const coords = result.geometry.getCoordinates();
              const address = result.getAddressLine();
              const name = result.getLocalities().join(', ') || '–ù–∞–π–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ';
              
              console.log('üìç Search result:', { coords, address, name });
              
              if (onLocationSelect) {
                onLocationSelect({
                  coordinates: coords,
                  address: address,
                  name: name
                });
              }
            }).catch((error) => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞:', error);
            });
          });

          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
          mapInstance.events.add('click', (e) => {
            console.log('üëÜ Map clicked');
            const coords = e.get('coords');
            console.log('üìç Click coordinates:', coords);
            
            if (onLocationSelect) {
              // –ü—Ä–æ—Å—Ç–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
              window.ymaps.geocode(coords).then((res) => {
                console.log('üîÑ Geocoding result:', res);
                const firstGeoObject = res.geoObjects.get(0);
                const address = firstGeoObject ? firstGeoObject.getAddressLine() : '';
                
                const locationData = {
                  coordinates: coords,
                  address: address || `${coords[0].toFixed(6)}, ${coords[1].toFixed(6)}`,
                  name: '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞'
                };
                
                console.log('üìç Location selected:', locationData);
                onLocationSelect(locationData);
              }).catch((error) => {
                console.error('‚ùå Geocoding error:', error);
                const locationData = {
                  coordinates: coords,
                  address: `${coords[0].toFixed(6)}, ${coords[1].toFixed(6)}`,
                  name: '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞'
                };
                onLocationSelect(locationData);
              });
            }
          });
        }

        setMap(mapInstance);
        console.log('‚úÖ Map created successfully');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
      }
    };

    initMap();

    return () => {
      if (map) {
        console.log('üßπ Destroying map...');
        map.destroy();
      }
    };
  }, [center, zoom, interactive, onLocationSelect]);

  // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ selectedLocation
  useEffect(() => {
    if (map && selectedLocation?.coordinates) {
      console.log('üìç Updating placemark:', selectedLocation);
      
      if (placemark) {
        map.geoObjects.remove(placemark);
      }

      const newPlacemark = new window.ymaps.Placemark(
        selectedLocation.coordinates,
        {
          balloonContent: `<strong>${selectedLocation.name}</strong><br/>${selectedLocation.address}`,
          iconCaption: selectedLocation.name
        },
        {
          preset: 'islands#redDotIconWithCaption',
          draggable: interactive
        }
      );

      map.geoObjects.add(newPlacemark);
      setPlacemark(newPlacemark);
      map.setCenter(selectedLocation.coordinates, Math.max(zoom, 15));
      
      console.log('‚úÖ Placemark updated');
    }
  }, [map, selectedLocation, interactive, zoom]);

  return (
    <div style={{ position: 'relative' }}>
      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã */}
      <div 
        ref={mapRef} 
        style={{ 
          width: '100%', 
          height: height,
          borderRadius: '8px',
          backgroundColor: '#f0f0f0'
        }} 
      />
      
      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      {interactive && (
        <div style={{
          marginTop: '8px',
          fontSize: '12px',
          color: '#666',
          textAlign: 'center'
        }}>
          üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ Yandex –Ω–∞ –∫–∞—Ä—Ç–µ –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ
        </div>
      )}
    </div>
  );
};

export default MapComponent;
