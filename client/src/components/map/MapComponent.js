// client/src/components/map/MapComponent.js - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import React, { useEffect, useRef, useState, useCallback } from 'react';

const MapComponent = ({ 
  center = [55.751244, 37.618423],
  zoom = 10,
  height = '400px',
  onLocationSelect,
  selectedLocation,
  interactive = false
}) => {
  const mapRef = useRef(null);
  const [map, setMap] = useState(null);
  const [placemark, setPlacemark] = useState(null);
  const [isMapReady, setIsMapReady] = useState(false);

  const handleLocationSelect = useCallback((locationData) => {
    if (onLocationSelect) {
      onLocationSelect(locationData);
    }
  }, [onLocationSelect]);

  useEffect(() => {
    if (!mapRef.current || isMapReady) return;

    const initMap = () => {
      if (!window.ymaps) {
        const script = document.createElement('script');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        const apiKey = process.env.REACT_APP_YANDEX_MAPS_API_KEY;
        
        if (!apiKey) {
          console.error('‚ùå REACT_APP_YANDEX_MAPS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
          return;
        }
        
        script.src = `https://api-maps.yandex.ru/2.1/?apikey=${apiKey}&lang=ru_RU`;
        
        console.log('üó∫Ô∏è Loading Yandex Maps with API key:', apiKey.substring(0, 10) + '...');
        
        script.onload = () => {
          console.log('‚úÖ Yandex Maps API loaded successfully');
          window.ymaps.ready(createMap);
        };
        script.onerror = () => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps API');
        };
        document.head.appendChild(script);
      } else {
        console.log('‚ôªÔ∏è Yandex Maps API already loaded');
        window.ymaps.ready(createMap);
      }
    };

    const createMap = () => {
      try {
        console.log('üèóÔ∏è Creating map instance...');
        const mapInstance = new window.ymaps.Map(mapRef.current, {
          center: center,
          zoom: zoom,
          controls: ['zoomControl', 'geolocationControl']
        });

        if (interactive) {
          console.log('üîß Adding interactive features...');
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º SearchControl —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
          const searchControl = new window.ymaps.control.SearchControl({
            options: {
              // –°–æ–≥–ª–∞—Å–Ω–æ –ø–æ–∏—Å–∫–æ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º yandex#search –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
              provider: 'yandex#search',
              placeholderContent: '–ü–æ–∏—Å–∫ –º–µ—Å—Ç –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π...',
              maxWidth: [200, 400],
              noPlacemark: false,
              resultsPerPage: 5
            }
          });
          
          mapInstance.controls.add(searchControl);
          console.log('üîç Search control added with provider: yandex#search');

          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–∏—Å–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
          searchControl.events.add('resultselect', (e) => {
            try {
              console.log('üéØ Search result selected');
              const index = e.get('index');
              
              searchControl.getResult(index).then((result) => {
                const coords = result.geometry.getCoordinates();
                const address = result.getAddressLine();
                const name = result.properties.get('name') || 
                            result.getLocalities().join(', ') || 
                            '–ù–∞–π–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ';
                
                console.log('üìç Search result data:', { coords, address, name });
                
                handleLocationSelect({
                  coordinates: coords,
                  address: address,
                  name: name
                });
              }).catch((error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞:', error);
              });
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞:', error);
            }
          });

          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–∏—Å–∫–∞
          searchControl.events.add('error', (e) => {
            console.error('‚ùå Search error:', e);
          });

          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
          mapInstance.events.add('click', (e) => {
            console.log('üëÜ Map clicked');
            const coords = e.get('coords');
            console.log('üìç Click coordinates:', coords);
            
            handleLocationSelect({
              coordinates: coords,
              address: `${coords[0].toFixed(6)}, ${coords[1].toFixed(6)}`,
              name: '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞'
            });
          });
        }

        setMap(mapInstance);
        setIsMapReady(true);
        console.log('‚úÖ Map created successfully');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
      }
    };

    initMap();

    return () => {
      if (map && !isMapReady) {
        console.log('üßπ Destroying map...');
        map.destroy();
      }
    };
  }, []); // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è

  useEffect(() => {
    if (map && selectedLocation?.coordinates && isMapReady) {
      console.log('üìç Updating placemark:', selectedLocation);
      
      if (placemark) {
        map.geoObjects.remove(placemark);
      }

      const newPlacemark = new window.ymaps.Placemark(
        selectedLocation.coordinates,
        {
          balloonContent: `<strong>${selectedLocation.name}</strong><br/>${selectedLocation.address}`,
          iconCaption: selectedLocation.name
        },
        {
          preset: 'islands#redDotIconWithCaption',
          draggable: false
        }
      );

      map.geoObjects.add(newPlacemark);
      setPlacemark(newPlacemark);
      map.setCenter(selectedLocation.coordinates, Math.max(zoom, 15));
      
      console.log('‚úÖ Placemark updated');
    }
  }, [map, selectedLocation, isMapReady, zoom]);

  return (
    <div style={{ position: 'relative' }}>
      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã */}
      <div 
        ref={mapRef} 
        style={{ 
          width: '100%', 
          height: height,
          borderRadius: '8px',
          backgroundColor: '#f0f0f0'
        }} 
      />
      
      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      {interactive && (
        <div style={{
          marginTop: '8px',
          fontSize: '12px',
          color: '#666',
          textAlign: 'center'
        }}>
          üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ
        </div>
      )}
    </div>
  );
};

export default MapComponent;
