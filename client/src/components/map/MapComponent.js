// client/src/components/map/MapComponent.js - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–û–î–î–ï–†–ñ–ö–û–ô –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–• –õ–û–ö–ê–¶–ò–ô
import React, { useEffect, useRef, useState, useCallback } from 'react';

const MapComponent = ({ 
  center = [55.751244, 37.618423],
  zoom = 10,
  height = '400px',
  onLocationSelect,
  selectedLocation,
  interactive = false,
  // –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
  locations = [],
  userLocation = null
}) => {
  const mapRef = useRef(null);
  const [map, setMap] = useState(null);
  const [placemark, setPlacemark] = useState(null);
  const [objectManager, setObjectManager] = useState(null);
  const [userPlacemark, setUserPlacemark] = useState(null);
  const [isMapReady, setIsMapReady] = useState(false);

  const handleLocationSelect = useCallback((locationData) => {
    if (onLocationSelect) {
      onLocationSelect(locationData);
    }
  }, [onLocationSelect]);

  // –î–û–ë–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ GeoJSON –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
  const createGeoJSON = useCallback(() => {
    console.log('üîç –°–æ–∑–¥–∞–µ–º GeoJSON –¥–ª—è –ª–æ–∫–∞—Ü–∏–π:', locations.length);
    
    if (!Array.isArray(locations) || locations.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return {
        type: "FeatureCollection",
        features: []
      };
    }

    const features = locations.map((location, index) => {
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è Yandex Maps
      const lat = parseFloat(location.latitude);
      const lng = parseFloat(location.longitude);
      
      console.log(`üìç –õ–æ–∫–∞—Ü–∏—è ${location.name}: lat=${lat}, lng=${lng}`);
      
      // –ü–†–û–í–ï–†–ö–ê: –í–∞–ª–∏–¥–Ω—ã–µ –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      if (isNaN(lat) || isNaN(lng)) {
        console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ ${location.name}:`, { lat, lng });
        return null;
      }
      
      return {
        type: "Feature",
        id: location.id || index,
        geometry: {
          type: "Point",
          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–ª—è Yandex Maps –ø–æ—Ä—è–¥–æ–∫ [—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞]
          coordinates: [lat, lng]
        },
        properties: {
          balloonContent: `
            <div style="padding: 10px; max-width: 250px;">
              <h5>${location.name}</h5>
              <p>${location.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
              <p><strong>–ê–¥—Ä–µ—Å:</strong> ${location.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
              ${location.distance_km ? `<p><strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> ${location.distance_km.toFixed(1)} –∫–º</p>` : ''}
              <a href="/locations/${location.id}" style="color: #007bff;">–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí</a>
            </div>
          `,
          clusterCaption: location.name,
          hintContent: location.name
        },
        options: {
          preset: 'islands#redDotIcon'
        }
      };
    }).filter(feature => feature !== null); // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è

    console.log('‚úÖ –°–æ–∑–¥–∞–Ω–æ features:', features.length);
    
    return {
      type: "FeatureCollection",
      features: features
    };
  }, [locations]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  useEffect(() => {
    if (!mapRef.current || isMapReady) return;

    const initMap = () => {
      if (!window.ymaps) {
        const script = document.createElement('script');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        const apiKey = process.env.REACT_APP_YANDEX_MAPS_API_KEY;
        
        if (!apiKey) {
          console.error('‚ùå REACT_APP_YANDEX_MAPS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
          return;
        }
        
        script.src = `https://api-maps.yandex.ru/2.1/?apikey=${apiKey}&lang=ru_RU&coordorder=latlong`;
        
        console.log('üó∫Ô∏è Loading Yandex Maps with API key:', apiKey.substring(0, 10) + '...');
        
        script.onload = () => {
          console.log('‚úÖ Yandex Maps API loaded successfully');
          window.ymaps.ready(createMap);
        };
        script.onerror = () => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Yandex Maps API');
        };
        document.head.appendChild(script);
      } else {
        console.log('‚ôªÔ∏è Yandex Maps API already loaded');
        window.ymaps.ready(createMap);
      }
    };

    const createMap = () => {
      try {
        console.log('üèóÔ∏è Creating map instance...');
        const mapInstance = new window.ymaps.Map(mapRef.current, {
          center: center,
          zoom: zoom,
          controls: ['zoomControl', 'geolocationControl']
        });

        // –î–û–ë–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º ObjectManager –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
        const objectManagerInstance = new window.ymaps.ObjectManager({
          clusterize: true,
          gridSize: 64,
          clusterDisableClickZoom: false
        });

        // –î–æ–±–∞–≤–ª—è–µ–º ObjectManager –Ω–∞ –∫–∞—Ä—Ç—É
        mapInstance.geoObjects.add(objectManagerInstance);

        // –î–û–ë–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –æ–±—ä–µ–∫—Ç—É –≤ ObjectManager
        objectManagerInstance.objects.events.add('click', (e) => {
          const objectId = e.get('objectId');
          const object = objectManagerInstance.objects.getById(objectId);
          
          if (object && handleLocationSelect) {
            console.log('üéØ Clicked on location object:', object);
            handleLocationSelect({
              coordinates: object.geometry.coordinates,
              properties: object.properties
            });
          }
        });

        if (interactive) {
          console.log('üîß Adding interactive features...');
          
          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º SearchControl —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
          const searchControl = new window.ymaps.control.SearchControl({
            options: {
              // –°–æ–≥–ª–∞—Å–Ω–æ –ø–æ–∏—Å–∫–æ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º yandex#search –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
              provider: 'yandex#search',
              placeholderContent: '–ü–æ–∏—Å–∫ –º–µ—Å—Ç –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π...',
              maxWidth: [200, 400],
              noPlacemark: false,
              resultsPerPage: 5
            }
          });
          
          mapInstance.controls.add(searchControl);
          console.log('üîç Search control added with provider: yandex#search');

          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–æ–∏—Å–∫–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
          searchControl.events.add('resultselect', (e) => {
            try {
              console.log('üéØ Search result selected');
              const index = e.get('index');
              
              searchControl.getResult(index).then((result) => {
                const coords = result.geometry.getCoordinates();
                const address = result.getAddressLine();
                const name = result.properties.get('name') || 
                            result.getLocalities().join(', ') || 
                            '–ù–∞–π–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ';
                
                console.log('üìç Search result data:', { coords, address, name });
                
                handleLocationSelect({
                  coordinates: coords,
                  address: address,
                  name: name
                });
              }).catch((error) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞:', error);
              });
            } catch (error) {
              console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞:', error);
            }
          });

          // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–∏—Å–∫–∞
          searchControl.events.add('error', (e) => {
            console.error('‚ùå Search error:', e);
          });

          // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
          mapInstance.events.add('click', (e) => {
            console.log('üëÜ Map clicked');
            const coords = e.get('coords');
            console.log('üìç Click coordinates:', coords);
            
            handleLocationSelect({
              coordinates: coords,
              address: `${coords[0].toFixed(6)}, ${coords[1].toFixed(6)}`,
              name: '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–æ—á–∫–∞'
            });
          });
        }

        setMap(mapInstance);
        setObjectManager(objectManagerInstance);
        setIsMapReady(true);
        console.log('‚úÖ Map created successfully');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:', error);
      }
    };

    initMap();

    return () => {
      if (map && !isMapReady) {
        console.log('üßπ Destroying map...');
        map.destroy();
      }
    };
  }, []); // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è

  // –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ
  useEffect(() => {
    if (!objectManager || !isMapReady) {
      console.log('‚è≥ –ö–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫');
      return;
    }

    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ. –õ–æ–∫–∞—Ü–∏–π:', locations.length);

    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ—á–∫–∏
    objectManager.removeAll();

    if (locations.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –ª–æ–∫–∞—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      return;
    }

    // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ—á–∫–∏
    const geoJSON = createGeoJSON();
    
    if (geoJSON.features.length > 0) {
      objectManager.add(geoJSON);
      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç—É:', geoJSON.features.length);
      
      // –ü–æ–¥–≥–æ–Ω—è–µ–º –∫–∞—Ä—Ç—É –ø–æ–¥ –≤—Å–µ —Ç–æ—á–∫–∏
      if (map && geoJSON.features.length > 1) {
        const bounds = objectManager.getBounds();
        if (bounds) {
          map.setBounds(bounds, { 
            checkZoomRange: true,
            zoomMargin: 50
          });
        }
      }
    } else {
      console.log('‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    }

  }, [objectManager, locations, isMapReady, map, createGeoJSON]);

  // –î–û–ë–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (!map || !userLocation || !isMapReady) return;

    console.log('üë§ –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userLocation);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userPlacemark) {
      map.geoObjects.remove(userPlacemark);
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUserPlacemark = new window.ymaps.Placemark(
      [userLocation.latitude, userLocation.longitude],
      {
        balloonContent: '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
        hintContent: '–í—ã –∑–¥–µ—Å—å'
      },
      {
        preset: 'islands#blueCircleDotIcon'
      }
    );

    map.geoObjects.add(newUserPlacemark);
    setUserPlacemark(newUserPlacemark);

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      if (map && newUserPlacemark) {
        map.geoObjects.remove(newUserPlacemark);
      }
    };
  }, [map, userLocation, isMapReady]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –º–µ—Ç–∫–∏ (–¥–ª—è AddLocationPage)
  useEffect(() => {
    if (map && selectedLocation?.coordinates && isMapReady && !locations.length) {
      console.log('üìç Updating single placemark:', selectedLocation);
      
      if (placemark) {
        map.geoObjects.remove(placemark);
      }

      const newPlacemark = new window.ymaps.Placemark(
        selectedLocation.coordinates,
        {
          balloonContent: `<strong>${selectedLocation.name}</strong><br/>${selectedLocation.address}`,
          iconCaption: selectedLocation.name
        },
        {
          preset: 'islands#redDotIconWithCaption',
          draggable: false
        }
      );

      map.geoObjects.add(newPlacemark);
      setPlacemark(newPlacemark);
      map.setCenter(selectedLocation.coordinates, Math.max(zoom, 15));
      
      console.log('‚úÖ Single placemark updated');
    }
  }, [map, selectedLocation, isMapReady, zoom, locations.length]);

  return (
    <div style={{ position: 'relative' }}>
      {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã */}
      <div 
        ref={mapRef} 
        style={{ 
          width: '100%', 
          height: height,
          borderRadius: '8px',
          backgroundColor: '#f0f0f0'
        }} 
      />
      
      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ */}
      {interactive && (
        <div style={{
          marginTop: '8px',
          fontSize: '12px',
          color: '#666',
          textAlign: 'center'
        }}>
          üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ
        </div>
      )}

      {/* –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–∫–∞—Ü–∏—è—Ö */}
      {locations.length > 0 && (
        <div style={{
          marginTop: '8px',
          fontSize: '12px',
          color: '#666',
          textAlign: 'center'
        }}>
          üìç –û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π: {locations.length}
          {userLocation && ' | üë§ –í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ —Å–∏–Ω–∏–º'}
        </div>
      )}
    </div>
  );
};

export default MapComponent;
