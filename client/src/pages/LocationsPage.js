// client/src/pages/LocationsPage.js - –î–û–ë–ê–í–õ–Ø–ï–ú –ö–ê–†–¢–£
import React, { useEffect, useState } from 'react';
import { Container, Row, Col, Card, Button, Form, Alert, Tab, Tabs } from 'react-bootstrap';
import { useDispatch, useSelector } from 'react-redux';
import { Link } from 'react-router-dom';
import LocationList from '../components/locations/LocationList';
import LocationFilter from '../components/locations/LocationFilter';
import MapComponent from '../components/map/MapComponent';
import Pagination from '../components/common/Pagination';
import { 
  fetchLocations, 
  setFilters, 
  clearFilters, 
  setCurrentPage,
  clearError 
} from '../redux/slices/locationSlice';

const LocationsPage = () => {
  const dispatch = useDispatch();
  const { 
    locations, 
    loading, 
    error, 
    filters, 
    currentPage, 
    totalPages 
  } = useSelector(state => state.locations);
  
  const { isAuthenticated } = useSelector(state => state.auth);
  const [localFilters, setLocalFilters] = useState(filters);
  const [activeTab, setActiveTab] = useState('list');

  useEffect(() => {
    handleLoadLocations();
  }, [currentPage, filters]);

  const handleLoadLocations = async () => {
    try {
      const params = {
        page: currentPage,
        limit: 10,
        ...filters
      };
      
      await dispatch(fetchLocations(params));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π:', error);
    }
  };

  const handleFilterChange = (newFilters) => {
    setLocalFilters(newFilters);
    dispatch(setFilters(newFilters));
    dispatch(setCurrentPage(1));
  };

  const handleClearFilters = () => {
    setLocalFilters({
      search: '',
      category_id: '',
      best_time_of_day: '',
      best_season: '',
      accessibility: '',
      difficulty_level: '',
      permission_required: ''
    });
    dispatch(clearFilters());
    dispatch(setCurrentPage(1));
  };

  const handlePageChange = (page) => {
    dispatch(setCurrentPage(page));
  };

  return (
    <Container className="py-4">
      <Row>
        <Col>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1>üìç –õ–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∏</h1>
            {isAuthenticated && (
              <Button 
                as={Link} 
                to="/locations/add" 
                variant="primary"
                size="lg"
              >
                ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
              </Button>
            )}
          </div>
        </Col>
      </Row>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <Row className="mb-4">
        <Col>
          <Card>
            <Card.Header>
              <h5 className="mb-0">üîç –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞</h5>
            </Card.Header>
            <Card.Body>
              <LocationFilter
                filters={localFilters}
                onFilterChange={handleFilterChange}
                onClearFilters={handleClearFilters}
              />
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* –û—à–∏–±–∫–∏ */}
      {error && (
        <Row className="mb-4">
          <Col>
            <Alert variant="danger" className="d-flex justify-content-between align-items-center">
              <div>
                <strong>–û—à–∏–±–∫–∞:</strong> {error}
              </div>
              <Button variant="outline-danger" size="sm" onClick={() => dispatch(clearError())}>
                –ó–∞–∫—Ä—ã—Ç—å
              </Button>
            </Alert>
          </Col>
        </Row>
      )}

      {/* –í–∫–ª–∞–¥–∫–∏: –°–ø–∏—Å–æ–∫ / –ö–∞—Ä—Ç–∞ */}
      <Row>
        <Col>
          <Tabs
            activeKey={activeTab}
            onSelect={(k) => setActiveTab(k)}
            className="mb-3"
          >
            <Tab eventKey="list" title="üìã –°–ø–∏—Å–æ–∫">
              {loading ? (
                <div className="text-center py-5">
                  <div className="spinner-border text-primary" role="status">
                    <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                  </div>
                  <p className="mt-3">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞—Ü–∏–π...</p>
                </div>
              ) : locations.length > 0 ? (
                <>
                  <LocationList locations={locations} />
                  
                  {totalPages > 1 && (
                    <div className="mt-4">
                      <Pagination
                        currentPage={currentPage}
                        totalPages={totalPages}
                        onPageChange={handlePageChange}
                      />
                    </div>
                  )}
                </>
              ) : (
                <Card className="text-center py-5">
                  <Card.Body>
                    <h3>üì≠ –õ–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p className="text-muted">
                      {Object.values(filters).some(filter => filter) 
                        ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞'
                        : '–ü–æ–∫–∞ —á—Ç–æ –ª–æ–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã'
                      }
                    </p>
                    {isAuthenticated && (
                      <Button as={Link} to="/locations/add" variant="primary">
                        –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –ª–æ–∫–∞—Ü–∏—é
                      </Button>
                    )}
                  </Card.Body>
                </Card>
              )}
            </Tab>
            
            <Tab eventKey="map" title="üó∫Ô∏è –ö–∞—Ä—Ç–∞">
              <div style={{ height: '600px', width: '100%' }}>
                <MapComponent
                  center={[55.751244, 37.618423]}
                  zoom={10}
                  height="600px"
                  locations={locations}
                  interactive={false}
                />
              </div>
            </Tab>
          </Tabs>
        </Col>
      </Row>
    </Container>
  );
};

export default LocationsPage;
