// client/src/pages/LocationsPage.js - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ï–ô
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Form, Alert, Badge } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { FaMapMarkerAlt, FaList, FaMap, FaPlus, FaFilter, FaChevronDown, FaChevronUp, FaStar } from 'react-icons/fa';
import api from '../services/api';

const LocationsPage = () => {
  const navigate = useNavigate();
  const { isAuthenticated } = useSelector(state => state.auth);
  
  const [locations, setLocations] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [viewMode, setViewMode] = useState('map');
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);
  
  // –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [selectedTime, setSelectedTime] = useState('');
  const [selectedAccessibility, setSelectedAccessibility] = useState('');
  const [selectedDifficulty, setSelectedDifficulty] = useState('');
  
  // 1. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  const [selectedPhotoType, setSelectedPhotoType] = useState('');
  const [selectedSeason, setSelectedSeason] = useState('');
  const [selectedLighting, setSelectedLighting] = useState('');
  const [selectedAngle, setSelectedAngle] = useState('');
  
  // 2. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  const [selectedTransport, setSelectedTransport] = useState('');
  const [selectedCost, setSelectedCost] = useState('');
  const [selectedPopularity, setSelectedPopularity] = useState('');
  const [selectedPhysicalPrep, setSelectedPhysicalPrep] = useState('');
  
  // 3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
  const [selectedPlatform, setSelectedPlatform] = useState('');
  const [selectedRating, setSelectedRating] = useState('');
  const [selectedDateAdded, setSelectedDateAdded] = useState('');

  // –î–û–ë–ê–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const getLocalizedTime = (time) => {
    const timeMap = {
      '—É—Ç—Ä–æ': '–£—Ç—Ä–æ',
      '–¥–µ–Ω—å': '–î–µ–Ω—å', 
      '–≤–µ—á–µ—Ä': '–í–µ—á–µ—Ä',
      '–Ω–æ—á—å': '–ù–æ—á—å',
      'morning': '–£—Ç—Ä–æ',
      'day': '–î–µ–Ω—å',
      'evening': '–í–µ—á–µ—Ä', 
      'night': '–ù–æ—á—å',
      'any': '–õ—é–±–æ–µ –≤—Ä–µ–º—è'
    };
    return timeMap[time] || time;
  };

  const getLocalizedAccessibility = (accessibility) => {
    const accessibilityMap = {
      '–ª–µ–≥–∫–∞—è': '–õ–µ–≥–∫–∞—è',
      '—Å—Ä–µ–¥–Ω—è—è': '–°—Ä–µ–¥–Ω—è—è',
      '—Å–ª–æ–∂–Ω–∞—è': '–°–ª–æ–∂–Ω–∞—è',
      'easy': '–õ–µ–≥–∫–∞—è',
      'moderate': '–°—Ä–µ–¥–Ω—è—è', 
      'difficult': '–°–ª–æ–∂–Ω–∞—è',
      'expert': '–≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è'
    };
    return accessibilityMap[accessibility] || accessibility;
  };

  const getLocalizedPhotoType = (photoType) => {
    const photoTypeMap = {
      '–ø–æ—Ä—Ç—Ä–µ—Ç': '–ü–æ—Ä—Ç—Ä–µ—Ç',
      '–ø–µ–π–∑–∞–∂': '–ü–µ–π–∑–∞–∂',
      '–º–∞–∫—Ä–æ': '–ú–∞–∫—Ä–æ',
      '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞',
      'street': '–°—Ç—Ä–∏—Ç —Ñ–æ—Ç–æ',
      'portrait': '–ü–æ—Ä—Ç—Ä–µ—Ç',
      'landscape': '–ü–µ–π–∑–∞–∂',
      'macro': '–ú–∞–∫—Ä–æ',
      'architecture': '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'
    };
    return photoTypeMap[photoType] || photoType;
  };

  const getLocalizedSeason = (season) => {
    const seasonMap = {
      '–≤–µ—Å–Ω–∞': '–í–µ—Å–Ω–∞',
      '–ª–µ—Ç–æ': '–õ–µ—Ç–æ', 
      '–æ—Å–µ–Ω—å': '–û—Å–µ–Ω—å',
      '–∑–∏–º–∞': '–ó–∏–º–∞',
      'spring': '–í–µ—Å–Ω–∞',
      'summer': '–õ–µ—Ç–æ',
      'autumn': '–û—Å–µ–Ω—å',
      'winter': '–ó–∏–º–∞'
    };
    return seasonMap[season] || season;
  };

  const getLocalizedLighting = (lighting) => {
    const lightingMap = {
      '–∑–æ–ª–æ—Ç–æ–π_—á–∞—Å': '–ó–æ–ª–æ—Ç–æ–π —á–∞—Å',
      '—Å–∏–Ω–∏–π_—á–∞—Å': '–°–∏–Ω–∏–π —á–∞—Å',
      '–¥–Ω–µ–≤–Ω–æ–π_—Å–≤–µ—Ç': '–î–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç',
      'golden_hour': '–ó–æ–ª–æ—Ç–æ–π —á–∞—Å',
      'blue_hour': '–°–∏–Ω–∏–π —á–∞—Å',
      'daylight': '–î–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç'
    };
    return lightingMap[lighting] || lighting;
  };

  const getLocalizedTransport = (transport) => {
    const transportMap = {
      '–ø–µ—à–∫–æ–º': '–ü–µ—à–∫–æ–º',
      '–Ω–∞_–º–∞—à–∏–Ω–µ': '–ù–∞ –º–∞—à–∏–Ω–µ',
      '–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π': '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
      'walking': '–ü–µ—à–∫–æ–º',
      'car': '–ù–∞ –º–∞—à–∏–Ω–µ',
      'public_transport': '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    };
    return transportMap[transport] || transport;
  };

  const getLocalizedCost = (cost) => {
    const costMap = {
      '–±–µ—Å–ø–ª–∞—Ç–Ω–æ': '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ',
      '–ø–ª–∞—Ç–Ω–æ': '–ü–ª–∞—Ç–Ω–æ',
      '—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ': '–¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ',
      'free': '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ',
      'paid': '–ü–ª–∞—Ç–Ω–æ',
      'permission': '–¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ'
    };
    return costMap[cost] || cost;
  };

  const getLocalizedPopularity = (popularity) => {
    const popularityMap = {
      '—Å–∫—Ä—ã—Ç—ã–µ': '–°–∫—Ä—ã—Ç—ã–µ –º–µ—Å—Ç–∞',
      '–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ': '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ',
      '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ': '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ',
      'hidden': '–°–∫—Ä—ã—Ç—ã–µ –º–µ—Å—Ç–∞',
      'popular': '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ',
      'tourist': '–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ'
    };
    return popularityMap[popularity] || popularity;
  };

  const getLocalizedPhysicalPrep = (prep) => {
    const prepMap = {
      '–ª–µ–≥–∫–æ': '–õ–µ–≥–∫–æ',
      '—Å—Ä–µ–¥–Ω–µ': '–°—Ä–µ–¥–Ω–µ',
      '—Å–ª–æ–∂–Ω–æ': '–°–ª–æ–∂–Ω–æ',
      'easy': '–õ–µ–≥–∫–æ',
      'medium': '–°—Ä–µ–¥–Ω–µ',
      'hard': '–°–ª–æ–∂–Ω–æ'
    };
    return prepMap[prep] || prep;
  };

  const getLocalizedPlatform = (platform) => {
    const platformMap = {
      'instagram': 'Instagram',
      'tiktok': 'TikTok',
      '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—ä–µ–º–∫–∞',
      'professional': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—ä–µ–º–∫–∞'
    };
    return platformMap[platform] || platform;
  };

  const getLocalizedEquipment = (equipment) => {
    const equipmentMap = {
      '—Ç–µ–ª–µ—Ñ–æ–Ω': '–¢–µ–ª–µ—Ñ–æ–Ω',
      '—Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç': '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç',
      '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ',
      '–¥—Ä–æ–Ω': '–î—Ä–æ–Ω',
      'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
      'camera': '–§–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç',
      'professional': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ',
      'drone': '–î—Ä–æ–Ω'
    };
    return equipmentMap[equipment] || equipment;
  };

  const getLocalizedParking = (parking) => {
    const parkingMap = {
      '–µ—Å—Ç—å': '–ï—Å—Ç—å –ø–∞—Ä–∫–æ–≤–∫–∞',
      '–Ω–µ—Ç': '–ù–µ—Ç –ø–∞—Ä–∫–æ–≤–∫–∏',
      '–ø–ª–∞—Ç–Ω–∞—è': '–ü–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞',
      'available': '–ï—Å—Ç—å –ø–∞—Ä–∫–æ–≤–∫–∞',
      'not_available': '–ù–µ—Ç –ø–∞—Ä–∫–æ–≤–∫–∏',
      'paid': '–ü–ª–∞—Ç–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞'
    };
    return parkingMap[parking] || parking;
  };
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  useEffect(() => {
    const fetchCategories = async () => {
      try {
        console.log('üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
        const response = await api.get('/categories');
        
        if (response.data.success) {
          setCategories(response.data.categories);
          console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data.categories.length);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', response.data.message);
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', err);
      }
    };
    
    fetchCategories();
  }, []);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞—Ü–∏–π
  useEffect(() => {
    const fetchLocations = async () => {
      try {
        setLoading(true);
        setError(null);
        
        console.log('üìç –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ª–æ–∫–∞—Ü–∏–π...');
        
        const response = await api.get('/locations');
        
        if (response.data.success) {
          setLocations(response.data.locations);
          console.log('‚úÖ –õ–æ–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data.locations.length);
        } else {
          throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π');
        }
        
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–∫–∞—Ü–∏–π:', err);
        setError(err.response?.data?.message || err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–∫–∞—Ü–∏–π');
      } finally {
        setLoading(false);
      }
    };
    
    fetchLocations();
  }, []);

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–∫–∞—Ü–∏–π
  const filteredLocations = locations.filter(location => {
    // –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    const matchesSearch = !searchTerm || 
      location.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (location.description && location.description.toLowerCase().includes(searchTerm.toLowerCase()));
    
    const matchesCategory = !selectedCategory || location.category_id === parseInt(selectedCategory);
    const matchesTime = !selectedTime || location.best_time_of_day === selectedTime;
    const matchesAccessibility = !selectedAccessibility || location.accessibility === selectedAccessibility;
    const matchesDifficulty = !selectedDifficulty || location.difficulty_level === parseInt(selectedDifficulty);
    
    // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const matchesPhotoType = !selectedPhotoType || location.photo_type === selectedPhotoType;
    const matchesSeason = !selectedSeason || location.best_season === selectedSeason;
    const matchesLighting = !selectedLighting || location.lighting_type === selectedLighting;
    const matchesAngle = !selectedAngle || location.camera_angle === selectedAngle;
    
    // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const matchesTransport = !selectedTransport || location.transport_type === selectedTransport;
    const matchesCost = !selectedCost || location.cost_type === selectedCost;
    const matchesPopularity = !selectedPopularity || location.popularity_level === selectedPopularity;
    const matchesPhysicalPrep = !selectedPhysicalPrep || location.physical_preparation === selectedPhysicalPrep;
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    const matchesPlatform = !selectedPlatform || location.suitable_for === selectedPlatform;
    const matchesRating = !selectedRating || 
      (selectedRating === '4' && location.average_rating >= 4) ||
      (selectedRating === '3' && location.average_rating >= 3);
    
    const matchesDateAdded = !selectedDateAdded || (() => {
      const locationDate = new Date(location.created_at);
      const now = new Date();
      const diffTime = Math.abs(now - locationDate);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      switch (selectedDateAdded) {
        case 'week': return diffDays <= 7;
        case 'month': return diffDays <= 30;
        case 'year': return diffDays <= 365;
        default: return true;
      }
    })();
    
    return matchesSearch && matchesCategory && matchesTime && matchesAccessibility && 
           matchesDifficulty && matchesPhotoType && matchesSeason && matchesLighting && 
           matchesAngle && matchesTransport && matchesCost && matchesPopularity && 
           matchesPhysicalPrep && matchesPlatform && matchesRating && matchesDateAdded;
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ—á–∫–µ –Ω–∞ –∫–∞—Ä—Ç–µ
  const handleLocationSelect = (locationData) => {
    const foundLocation = locations.find(loc => 
      Math.abs(loc.latitude - locationData.coordinates[0]) < 0.001 &&
      Math.abs(loc.longitude - locationData.coordinates[1]) < 0.001
    );
    
    if (foundLocation) {
      navigate(`/locations/${foundLocation.id}`);
    }
  };

  // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const handleResetFilters = () => {
    // –ë–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    setSearchTerm('');
    setSelectedCategory('');
    setSelectedTime('');
    setSelectedAccessibility('');
    setSelectedDifficulty('');
    
    // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    setSelectedPhotoType('');
    setSelectedSeason('');
    setSelectedLighting('');
    setSelectedAngle('');
    
    // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    setSelectedTransport('');
    setSelectedCost('');
    setSelectedPopularity('');
    setSelectedPhysicalPrep('');
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    setSelectedPlatform('');
    setSelectedRating('');
    setSelectedDateAdded('');
  };

  // –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const getActiveFiltersCount = () => {
    const filters = [
      searchTerm, selectedCategory, selectedTime, selectedAccessibility, selectedDifficulty,
      selectedPhotoType, selectedSeason, selectedLighting, selectedAngle,
      selectedTransport, selectedCost, selectedPopularity, selectedPhysicalPrep,
      selectedPlatform, selectedRating, selectedDateAdded
    ];
    return filters.filter(filter => filter !== '').length;
  };

  if (loading) {
    return (
      <Container className="py-5 text-center">
        <div className="spinner-border" role="status">
          <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </div>
        <p className="mt-3">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞—Ü–∏–π...</p>
      </Container>
    );
  }

  if (error) {
    return (
      <Container className="py-5">
        <Alert variant="danger">
          <Alert.Heading>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</Alert.Heading>
          <p>{error}</p>
        </Alert>
      </Container>
    );
  }

  return (
    <Container fluid className="py-4">
      {/* –ó–ê–ì–û–õ–û–í–û–ö –ò –ö–ù–û–ü–ö–ò */}
      <Row className="mb-4">
        <Col>
          <div className="d-flex justify-content-between align-items-center">
            <h1>
              <FaMapMarkerAlt className="me-2 text-danger" />
              –õ–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∏
            </h1>
            <div className="d-flex gap-2">
              {isAuthenticated && (
                <Button 
                  variant="primary"
                  onClick={() => navigate('/locations/add')}
                >
                  <FaPlus className="me-1" />
                  –î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é
                </Button>
              )}
              
              <Button
                variant={viewMode === 'list' ? 'primary' : 'outline-primary'}
                onClick={() => setViewMode('list')}
              >
                <FaList className="me-1" />
                –°–ø–∏—Å–æ–∫
              </Button>
              
              <Button
                variant={viewMode === 'map' ? 'primary' : 'outline-primary'}
                onClick={() => setViewMode('map')}
              >
                <FaMap className="me-1" />
                –ö–∞—Ä—Ç–∞
              </Button>
            </div>
          </div>
        </Col>
      </Row>

      {/* –†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–ò–õ–¨–¢–†–´ –ü–û–ò–°–ö–ê */}
      <Card className="mb-4">
        <Card.Header>
          <div className="d-flex justify-content-between align-items-center">
            <h5 className="mb-0">
              <FaFilter className="me-2" />
              –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
              {getActiveFiltersCount() > 0 && (
                <Badge bg="primary" className="ms-2">
                  {getActiveFiltersCount()}
                </Badge>
              )}
            </h5>
            <Button
              variant="outline-secondary"
              size="sm"
              onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
            >
              {showAdvancedFilters ? <FaChevronUp /> : <FaChevronDown />}
              {showAdvancedFilters ? ' –°–∫—Ä—ã—Ç—å' : ' –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ'}
            </Button>
          </div>
        </Card.Header>
        <Card.Body>
          {/* –ë–ê–ó–û–í–´–ï –§–ò–õ–¨–¢–†–´ */}
          <Row>
            <Col md={12} className="mb-3">
              <Form.Label>üîç –ü–æ–∏—Å–∫</Form.Label>
              <Form.Control
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </Col>
          </Row>
          
          <Row>
            <Col md={3} className="mb-3">
              <Form.Label>üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è</Form.Label>
              <Form.Select value={selectedCategory} onChange={(e) => setSelectedCategory(e.target.value)}>
                <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                {categories.map(category => (
                  <option key={category.id} value={category.id}>
                    {category.icon} {category.name}
                  </option>
                ))}
              </Form.Select>
            </Col>
            
            <Col md={3} className="mb-3">
              <Form.Label>üïê –í—Ä–µ–º—è —Å—É—Ç–æ–∫</Form.Label>
              <Form.Select value={selectedTime} onChange={(e) => setSelectedTime(e.target.value)}>
                <option value="">–õ—é–±–æ–µ –≤—Ä–µ–º—è</option>
                <option value="—É—Ç—Ä–æ">–£—Ç—Ä–æ</option>
                <option value="–¥–µ–Ω—å">–î–µ–Ω—å</option>
                <option value="–≤–µ—á–µ—Ä">–í–µ—á–µ—Ä</option>
                <option value="–Ω–æ—á—å">–ù–æ—á—å</option>
              </Form.Select>
            </Col>
            
            <Col md={3} className="mb-3">
              <Form.Label>‚ôø –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</Form.Label>
              <Form.Select value={selectedAccessibility} onChange={(e) => setSelectedAccessibility(e.target.value)}>
                <option value="">–õ—é–±–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</option>
                <option value="–ª–µ–≥–∫–∞—è">–õ–µ–≥–∫–∞—è</option>
                <option value="—Å—Ä–µ–¥–Ω—è—è">–°—Ä–µ–¥–Ω—è—è</option>
                <option value="—Å–ª–æ–∂–Ω–∞—è">–°–ª–æ–∂–Ω–∞—è</option>
              </Form.Select>
            </Col>
            
            <Col md={3} className="mb-3">
              <Form.Label>‚ö° –°–ª–æ–∂–Ω–æ—Å—Ç—å</Form.Label>
              <Form.Select value={selectedDifficulty} onChange={(e) => setSelectedDifficulty(e.target.value)}>
                <option value="">–õ—é–±–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å</option>
                <option value="1">1 - –û—á–µ–Ω—å –ª–µ–≥–∫–æ</option>
                <option value="2">2 - –õ–µ–≥–∫–æ</option>
                <option value="3">3 - –°—Ä–µ–¥–Ω–µ</option>
                <option value="4">4 - –°–ª–æ–∂–Ω–æ</option>
                <option value="5">5 - –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ</option>
              </Form.Select>
            </Col>
          </Row>

          {/* –†–ê–°–®–ò–†–ï–ù–ù–´–ï –§–ò–õ–¨–¢–†–´ */}
          {showAdvancedFilters && (
            <>
              {/* 1. –§–û–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò */}
              <hr />
              <h6 className="text-primary mb-3">üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h6>
              <Row>
                <Col md={3} className="mb-3">
                  <Form.Label>üì∏ –¢–∏–ø —Å—ä–µ–º–∫–∏</Form.Label>
                  <Form.Select value={selectedPhotoType} onChange={(e) => setSelectedPhotoType(e.target.value)}>
                    <option value="">–õ—é–±–æ–π —Ç–∏–ø</option>
                    <option value="–ø–æ—Ä—Ç—Ä–µ—Ç">–ü–æ—Ä—Ç—Ä–µ—Ç</option>
                    <option value="–ø–µ–π–∑–∞–∂">–ü–µ–π–∑–∞–∂</option>
                    <option value="–º–∞–∫—Ä–æ">–ú–∞–∫—Ä–æ</option>
                    <option value="–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞">–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</option>
                    <option value="street">Street —Ñ–æ—Ç–æ</option>
                  </Form.Select>
                </Col>
                
                <Col md={3} className="mb-3">
                  <Form.Label>üåÖ –õ—É—á—à–∏–π —Å–µ–∑–æ–Ω</Form.Label>
                  <Form.Select value={selectedSeason} onChange={(e) => setSelectedSeason(e.target.value)}>
                    <option value="">–õ—é–±–æ–π —Å–µ–∑–æ–Ω</option>
                    <option value="–≤–µ—Å–Ω–∞">–í–µ—Å–Ω–∞</option>
                    <option value="–ª–µ—Ç–æ">–õ–µ—Ç–æ</option>
                    <option value="–æ—Å–µ–Ω—å">–û—Å–µ–Ω—å</option>
                    <option value="–∑–∏–º–∞">–ó–∏–º–∞</option>
                  </Form.Select>
                </Col>
                
                <Col md={3} className="mb-3">
                  <Form.Label>‚òÄÔ∏è –û—Å–≤–µ—â–µ–Ω–∏–µ</Form.Label>
                  <Form.Select value={selectedLighting} onChange={(e) => setSelectedLighting(e.target.value)}>
                    <option value="">–õ—é–±–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ</option>
                    <option value="–∑–æ–ª–æ—Ç–æ–π_—á–∞—Å">–ó–æ–ª–æ—Ç–æ–π —á–∞—Å</option>
                    <option value="—Å–∏–Ω–∏–π_—á–∞—Å">–°–∏–Ω–∏–π —á–∞—Å</option>
                    <option value="–¥–Ω–µ–≤–Ω–æ–π_—Å–≤–µ—Ç">–î–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç</option>
                  </Form.Select>
                </Col>
                
                <Col md={3} className="mb-3">
                  <Form.Label>üìê –†–∞–∫—É—Ä—Å</Form.Label>
                  <Form.Select value={selectedAngle} onChange={(e) => setSelectedAngle(e.target.value)}>
                    <option value="">–õ—é–±–æ–π —Ä–∞–∫—É—Ä—Å</option>
                    <option value="—Å–≤–µ—Ä—Ö—É">–°–≤–µ—Ä—Ö—É</option>
                    <option value="—Å–Ω–∏–∑—É">–°–Ω–∏–∑—É</option>
                    <option value="–Ω–∞_—É—Ä–æ–≤–Ω–µ_–≥–ª–∞–∑">–ù–∞ —É—Ä–æ–≤–Ω–µ –≥–ª–∞–∑</option>
                  </Form.Select>
                </Col>
              </Row>

              {/* 2. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò */}
              <hr />
              <h6 className="text-success mb-3">üöó –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h6>
              <Row>
                <Col md={3} className="mb-3">
                  <Form.Label>üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</Form.Label>
                  <Form.Select value={selectedTransport} onChange={(e) => setSelectedTransport(e.target.value)}>
                    <option value="">–õ—é–±–æ–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</option>
                    <option value="–ø–µ—à–∫–æ–º">–ü–µ—à–∫–æ–º</option>
                    <option value="–Ω–∞_–º–∞—à–∏–Ω–µ">–ù–∞ –º–∞—à–∏–Ω–µ</option>
                    <option value="–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π">–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç</option>
                  </Form.Select>
                </Col>
                
                <Col md={3} className="mb-3">
                  <Form.Label>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å</Form.Label>
                  <Form.Select value={selectedCost} onChange={(e) => setSelectedCost(e.target.value)}>
                    <option value="">–õ—é–±–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</option>
                    <option value="–±–µ—Å–ø–ª–∞—Ç–Ω–æ">–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</option>
                    <option value="–ø–ª–∞—Ç–Ω–æ">–ü–ª–∞—Ç–Ω–æ</option>
                    <option value="—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ">–¢—Ä–µ–±—É–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ</option>
                  </Form.Select>
                </Col>
                
                <Col md={3} className="mb-3">
                  <Form.Label>üë• –ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å</Form.Label>
                  <Form.Select value={selectedPopularity} onChange={(e) => setSelectedPopularity(e.target.value)}>
                    <option value="">–õ—é–±–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å</option>
                    <option value="—Å–∫—Ä—ã—Ç—ã–µ">–°–∫—Ä—ã—Ç—ã–µ –º–µ—Å—Ç–∞</option>
                    <option value="–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ</option>
                    <option value="—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ">–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ</option>
                  </Form.Select>
                </Col>
                
                <Col md={3} className="mb-3">
                  <Form.Label>üèÉ –§–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞</Form.Label>
                  <Form.Select value={selectedPhysicalPrep} onChange={(e) => setSelectedPhysicalPrep(e.target.value)}>
                    <option value="">–õ—é–±–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞</option>
                    <option value="–ª–µ–≥–∫–æ">–õ–µ–≥–∫–æ</option>
                    <option value="—Å—Ä–µ–¥–Ω–µ">–°—Ä–µ–¥–Ω–µ</option>
                    <option value="—Å–ª–æ–∂–Ω–æ">–°–ª–æ–∂–Ω–æ</option>
                  </Form.Select>
                </Col>
              </Row>

              {/* 3. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –§–ò–õ–¨–¢–†–´ */}
              <hr />
              <h6 className="text-warning mb-3">üì± –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã</h6>
              <Row>
                <Col md={4} className="mb-3">
                  <Form.Label>üì± –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è</Form.Label>
                  <Form.Select value={selectedPlatform} onChange={(e) => setSelectedPlatform(e.target.value)}>
                    <option value="">–õ—é–±–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞</option>
                    <option value="instagram">Instagram</option>
                    <option value="tiktok">TikTok</option>
                    <option value="–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è">–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—ä–µ–º–∫–∞</option>
                  </Form.Select>
                </Col>
                
                <Col md={4} className="mb-3">
                  <Form.Label>‚≠ê –†–µ–π—Ç–∏–Ω–≥</Form.Label>
                  <Form.Select value={selectedRating} onChange={(e) => setSelectedRating(e.target.value)}>
                    <option value="">–õ—é–±–æ–π —Ä–µ–π—Ç–∏–Ω–≥</option>
                    <option value="4">4+ –∑–≤–µ–∑–¥—ã</option>
                    <option value="3">3+ –∑–≤–µ–∑–¥—ã</option>
                  </Form.Select>
                </Col>
                
                <Col md={4} className="mb-3">
                  <Form.Label>üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ</Form.Label>
                  <Form.Select value={selectedDateAdded} onChange={(e) => setSelectedDateAdded(e.target.value)}>
                    <option value="">–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è</option>
                    <option value="week">–ó–∞ –Ω–µ–¥–µ–ª—é</option>
                    <option value="month">–ó–∞ –º–µ—Å—è—Ü</option>
                    <option value="year">–ó–∞ –≥–æ–¥</option>
                  </Form.Select>
                </Col>
              </Row>
            </>
          )}
          
          {/* –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–ò–õ–¨–¢–†–ê–ú–ò */}
          <div className="d-flex gap-2 mt-3">
            <Button variant="primary" disabled>
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </Button>
            <Button variant="secondary" onClick={handleResetFilters}>
              –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ
            </Button>
            {getActiveFiltersCount() > 0 && (
              <Button variant="outline-danger" onClick={handleResetFilters}>
                –û—á–∏—Å—Ç–∏—Ç—å ({getActiveFiltersCount()})
              </Button>
            )}
          </div>
          
          <div className="mt-2">
            <small className="text-muted">
              –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π: <strong>{filteredLocations.length}</strong> –∏–∑ {locations.length}
              {categories.length > 0 && (
                <span className="ms-3">
                  –ö–∞—Ç–µ–≥–æ—Ä–∏–π: <strong>{categories.length}</strong>
                </span>
              )}
            </small>
          </div>
        </Card.Body>
      </Card>

      {/* –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ü–ò–°–û–ö –õ–û–ö–ê–¶–ò–ô –° –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ï–ô */}
      <div style={{ display: viewMode === 'list' ? 'block' : 'none' }}>
        <Row>
          {filteredLocations.length === 0 ? (
            <Col>
              <Alert variant="info">
                <Alert.Heading>–õ–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</Alert.Heading>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é.</p>
              </Alert>
            </Col>
          ) : (
            filteredLocations.map((location) => (
              <Col md={6} lg={4} key={location.id} className="mb-4">
                <Card className="h-100 shadow-sm">
                  {/* –ó–ê–ì–û–õ–û–í–û–ö –ö–ê–†–¢–û–ß–ö–ò */}
                  <Card.Header className="bg-light">
                    <div className="d-flex justify-content-between align-items-center">
                      <h6 className="mb-0 text-primary">
                        {categories.find(cat => cat.id === location.category_id)?.icon} {' '}
                        {categories.find(cat => cat.id === location.category_id)?.name || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}
                      </h6>
                      {location.difficulty_level && (
                        <span className="badge bg-warning">
                          –°–ª–æ–∂–Ω–æ—Å—Ç—å: {location.difficulty_level}/5
                        </span>
                      )}
                    </div>
                  </Card.Header>

                  <Card.Body className="d-flex flex-column">
                    <Card.Title className="h5">{location.name}</Card.Title>
                    
                    <Card.Text className="text-muted mb-3">
                      {location.description ? 
                        location.description.substring(0, 100) + '...' : 
                        '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                      }
                    </Card.Text>

                    {/* –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –° –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ï–ô */}
                    <div className="mb-3">
                      <small className="text-muted d-block">
                        <FaMapMarkerAlt className="me-1 text-danger" />
                        {location.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                      </small>
                      
                      {location.best_time_of_day && (
                        <small className="text-muted d-block">
                          üïê –õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {getLocalizedTime(location.best_time_of_day)}
                        </small>
                      )}
                      
                      {location.accessibility && (
                        <small className="text-muted d-block">
                          ‚ôø –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {getLocalizedAccessibility(location.accessibility)}
                        </small>
                      )}
                    </div>

                    {/* –§–û–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –° –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ï–ô */}
                    {(location.photo_type || location.best_season || location.lighting_type || location.camera_angle) && (
                      <div className="mb-3">
                        <h6 className="text-primary mb-2">üì∏ –§–æ—Ç–æ—Å—ä–µ–º–∫–∞</h6>
                        {location.photo_type && (
                          <small className="badge bg-primary me-1 mb-1">
                            {getLocalizedPhotoType(location.photo_type)}
                          </small>
                        )}
                        {location.best_season && (
                          <small className="badge bg-success me-1 mb-1">
                            üåÖ {getLocalizedSeason(location.best_season)}
                          </small>
                        )}
                        {location.lighting_type && (
                          <small className="badge bg-warning me-1 mb-1">
                            ‚òÄÔ∏è {getLocalizedLighting(location.lighting_type)}
                          </small>
                        )}
                        {location.camera_angle && (
                          <small className="badge bg-info me-1 mb-1">
                            üìê {location.camera_angle}
                          </small>
                        )}
                      </div>
                    )}

                    {/* –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –° –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ï–ô */}
                    {(location.transport_type || location.cost_type || location.popularity_level || location.physical_preparation) && (
                      <div className="mb-3">
                        <h6 className="text-success mb-2">üöó –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ</h6>
                        {location.transport_type && (
                          <small className="badge bg-secondary me-1 mb-1">
                            üöó {getLocalizedTransport(location.transport_type)}
                          </small>
                        )}
                        {location.cost_type && (
                          <small className="badge bg-success me-1 mb-1">
                            üí∞ {getLocalizedCost(location.cost_type)}
                          </small>
                        )}
                        {location.popularity_level && (
                          <small className="badge bg-info me-1 mb-1">
                            üë• {getLocalizedPopularity(location.popularity_level)}
                          </small>
                        )}
                        {location.physical_preparation && (
                          <small className="badge bg-warning me-1 mb-1">
                            üèÉ {getLocalizedPhysicalPrep(location.physical_preparation)}
                          </small>
                        )}
                      </div>
                    )}

                    {/* –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –° –õ–û–ö–ê–õ–ò–ó–ê–¶–ò–ï–ô */}
                    {(location.suitable_for || location.equipment_needed || location.parking_available || location.entrance_fee) && (
                      <div className="mb-3">
                        <h6 className="text-warning mb-2">üì± –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ</h6>
                        {location.suitable_for && (
                          <small className="badge bg-primary me-1 mb-1">
                            üì± {getLocalizedPlatform(location.suitable_for)}
                          </small>
                        )}
                        {location.equipment_needed && (
                          <small className="badge bg-secondary me-1 mb-1">
                            üé• {getLocalizedEquipment(location.equipment_needed)}
                          </small>
                        )}
                        {location.parking_available && (
                          <small className="badge bg-success me-1 mb-1">
                            üÖøÔ∏è {getLocalizedParking(location.parking_available)}
                          </small>
                        )}
                        {location.entrance_fee && (
                          <small className="badge bg-warning me-1 mb-1">
                            üí≥ {location.entrance_fee}
                          </small>
                        )}
                      </div>
                    )}

                    {/* –¢–ï–ì–ò */}
                    {location.tags && (
                      <div className="mb-3">
                        <h6 className="text-muted mb-2">üè∑Ô∏è –¢–µ–≥–∏</h6>
                        {location.tags.split(',').map((tag, index) => (
                          <small key={index} className="badge bg-light text-dark me-1 mb-1">
                            {tag.trim()}
                          </small>
                        ))}
                      </div>
                    )}

                    {/* –°–¢–ê–¢–ò–°–¢–ò–ö–ê */}
                    <div className="mb-3">
                      <div className="row text-center">
                        <div className="col-4">
                          <small className="text-muted d-block">–†–µ–π—Ç–∏–Ω–≥</small>
                          <strong className="text-warning">
                            {location.average_rating ? (
                              <>
                                <FaStar className="me-1" />
                                {location.average_rating.toFixed(1)}
                              </>
                            ) : '–ù–µ—Ç'}
                          </strong>
                        </div>
                        <div className="col-4">
                          <small className="text-muted d-block">–û—Ç–∑—ã–≤—ã</small>
                          <strong className="text-primary">
                            {location.reviews_count || 0}
                          </strong>
                        </div>
                        <div className="col-4">
                          <small className="text-muted d-block">–§–æ—Ç–æ</small>
                          <strong className="text-success">
                            {location.photos_count || 0}
                          </strong>
                        </div>
                      </div>
                    </div>

                    {/* –ö–ù–û–ü–ö–ê –î–ï–ô–°–¢–í–ò–Ø */}
                    <div className="mt-auto">
                      <Button 
                        variant="primary" 
                        className="w-100"
                        onClick={() => navigate(`/locations/${location.id}`)}
                      >
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
                      </Button>
                    </div>
                  </Card.Body>

                  {/* –§–£–¢–ï–† –ö–ê–†–¢–û–ß–ö–ò */}
                  <Card.Footer className="bg-light text-muted">
                    <small>
                      –î–æ–±–∞–≤–ª–µ–Ω–æ: {new Date(location.created_at).toLocaleDateString('ru-RU')}
                      {location.creator_username && (
                        <span className="ms-2">‚Ä¢ {location.creator_username}</span>
                      )}
                    </small>
                  </Card.Footer>
                </Card>
              </Col>
            ))
          )}
        </Row>
      </div>

      {/* –ö–ê–†–¢–ê –° –¢–û–ß–ö–ê–ú–ò */}
      <div style={{ display: viewMode === 'map' ? 'block' : 'none' }}>
        <Row>
          <Col>
            <Card>
              <Card.Body style={{ padding: 0 }}>
                <MapWithLocations 
                  locations={filteredLocations}
                  onLocationSelect={handleLocationSelect}
                />
              </Card.Body>
            </Card>
          </Col>
        </Row>
      </div>
    </Container>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏ (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const MapWithLocations = ({ locations, onLocationSelect }) => {
  const [map, setMap] = useState(null);
  const [objectManager, setObjectManager] = useState(null);
  const [isMapReady, setIsMapReady] = useState(false);

  const createGeoJSON = () => {
    return {
      type: "FeatureCollection",
      features: locations.map((location) => {
        const lat = parseFloat(location.latitude);
        const lng = parseFloat(location.longitude);
        
        return {
          type: "Feature",
          id: location.id,
          geometry: {
            type: "Point",
            coordinates: [lat, lng]
          },
          properties: {
            balloonContent: `
              <div style="padding: 10px;">
                <h5>${location.name}</h5>
                <p>${location.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                <p><strong>–ê–¥—Ä–µ—Å:</strong> ${location.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                <a href="/locations/${location.id}" style="color: #007bff;">–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí</a>
              </div>
            `,
            clusterCaption: location.name,
            hintContent: location.name
          },
          options: {
            preset: 'islands#redDotIcon'
          }
        };
      })
    };
  };

  useEffect(() => {
    if (!window.ymaps && !isMapReady) {
      const script = document.createElement('script');
      script.src = `https://api-maps.yandex.ru/2.1/?apikey=${process.env.REACT_APP_YANDEX_MAPS_API_KEY}&lang=ru_RU&coordorder=latlong`;
      
      script.onload = () => {
        window.ymaps.ready(() => {
          const mapElement = document.getElementById('locations-map');
          if (!mapElement) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç locations-map –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
          }

          const mapInstance = new window.ymaps.Map('locations-map', {
            center: [55.751244, 37.618423],
            zoom: 10,
            controls: ['zoomControl', 'geolocationControl', 'searchControl']
          });

          const objectManagerInstance = new window.ymaps.ObjectManager({
            clusterize: true,
            gridSize: 64,
            clusterDisableClickZoom: false
          });

          mapInstance.geoObjects.add(objectManagerInstance);
          
          setMap(mapInstance);
          setObjectManager(objectManagerInstance);
          setIsMapReady(true);
          
          console.log('‚úÖ –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        });
      };
      
      document.head.appendChild(script);
    }
  }, []);

  useEffect(() => {
    if (objectManager && locations.length > 0 && isMapReady) {
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ:', locations.length);
      
      objectManager.removeAll();
      const geoJSON = createGeoJSON();
      objectManager.add(geoJSON);
      
      if (map) {
        const bounds = objectManager.getBounds();
        if (bounds) {
          map.setBounds(bounds, { checkZoomRange: true });
        }
      }
    }
  }, [objectManager, locations, map, isMapReady]);

  return (
    <div 
      id="locations-map" 
      style={{ 
        width: '100%', 
        height: '600px',
        borderRadius: '8px',
        backgroundColor: isMapReady ? 'transparent' : '#f8f9fa'
      }} 
    >
      {!isMapReady && (
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          height: '100%',
          color: '#6c757d'
        }}>
          –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...
        </div>
      )}
    </div>
  );
};

export default LocationsPage;
