// client/src/pages/AddLocationPage.js - –ü–û–õ–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Form, Button, Alert, Card, Spinner } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import MapComponent from '../components/map/MapComponent';
import { createLocation } from '../redux/slices/locationSlice';

const AddLocationPage = () => {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    category_id: '',
    coordinates: null,
    address: '',
    accessibility: '',
    best_time: '',
    difficulty: 1,
    tags: ''
  });
  const [selectedLocation, setSelectedLocation] = useState(null);
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [validated, setValidated] = useState(false);

  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { user } = useSelector(state => state.auth);
  const { creating, createError } = useSelector(state => state.locations);

  useEffect(() => {
    if (!user) {
      navigate('/login');
    }
  }, [user, navigate]);

  useEffect(() => {
    if (createError) {
      setError(createError);
      setLoading(false);
    }
  }, [createError]);

  const handleLocationSelect = (locationData) => {
    console.log('–í—ã–±—Ä–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è:', locationData);
    
    setSelectedLocation(locationData);
    setFormData(prev => ({
      ...prev,
      coordinates: locationData.coordinates,
      address: locationData.address,
      name: prev.name || locationData.name
    }));
    
    setError('');
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    if (error) {
      setError('');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    const form = e.currentTarget;
    setValidated(true);
    
    if (!formData.name.trim()) {
      setError('–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
      return;
    }

    if (!formData.coordinates) {
      setError('–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –Ω–∞ –∫–∞—Ä—Ç–µ');
      return;
    }

    if (form.checkValidity() === false) {
      return;
    }

    setLoading(true);
    setError('');

    try {
      const locationData = {
        name: formData.name.trim(),
        description: formData.description.trim() || '',
        coordinates: formData.coordinates,
        address: formData.address || `${formData.coordinates[0].toFixed(6)}, ${formData.coordinates[1].toFixed(6)}`,
        category_id: parseInt(formData.category_id) || 1,
        best_time_of_day: formData.best_time || null,
        accessibility: formData.accessibility || null,
        difficulty_level: parseInt(formData.difficulty) || 1,
        tags: formData.tags || null,
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏:', locationData);

      const result = await dispatch(createLocation(locationData));
      
      if (createLocation.fulfilled.match(result)) {
        console.log('‚úÖ –õ–æ–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', result.payload);
        navigate('/locations');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:', result.error);
        setError(result.error?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏');
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏:', err);
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  const isFormValid = formData.name.trim() && selectedLocation && selectedLocation.coordinates;

  return (
    <Container className="py-4">
      <Row className="justify-content-center">
        <Col md={10} lg={8}>
          <Card className="shadow">
            <Card.Header className="bg-primary text-white">
              <h2 className="mb-0">üìç –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é</h2>
            </Card.Header>
            <Card.Body>
              {error && (
                <Alert variant="danger" dismissible onClose={() => setError('')}>
                  <strong>–û—à–∏–±–∫–∞:</strong> {error}
                </Alert>
              )}

              <Form noValidate validated={validated} onSubmit={handleSubmit}>
                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ *</Form.Label>
                      <Form.Control
                        type="text"
                        name="name"
                        value={formData.name}
                        onChange={handleInputChange}
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏"
                        required
                        isInvalid={validated && !formData.name.trim()}
                      />
                      <Form.Control.Feedback type="invalid">
                        –ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
                      </Form.Control.Feedback>
                    </Form.Group>
                  </Col>
                  
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Form.Label>
                      <Form.Select
                        name="category_id"
                        value={formData.category_id}
                        onChange={handleInputChange}
                      >
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                        <option value="1">–ü—Ä–∏—Ä–æ–¥–∞</option>
                        <option value="2">–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</option>
                        <option value="3">–ì–æ—Ä–æ–¥—Å–∫–æ–π –ø–µ–π–∑–∞–∂</option>
                        <option value="4">–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –º–µ—Å—Ç–æ</option>
                        <option value="5">–ü–∞—Ä–∫–∏ –∏ —Å–∞–¥—ã</option>
                        <option value="6">–í–æ–¥–æ–µ–º—ã</option>
                        <option value="7">–ì–æ—Ä—ã –∏ —Ö–æ–ª–º—ã</option>
                        <option value="8">–î—Ä—É–≥–æ–µ</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                </Row>

                <Form.Group className="mb-3">
                  <Form.Label>–û–ø–∏—Å–∞–Ω–∏–µ</Form.Label>
                  <Form.Control
                    as="textarea"
                    rows={3}
                    name="description"
                    value={formData.description}
                    onChange={handleInputChange}
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏..."
                  />
                </Form.Group>

                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å</Form.Label>
                      <Form.Select
                        name="accessibility"
                        value={formData.accessibility}
                        onChange={handleInputChange}
                      >
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏</option>
                        <option value="easy">–õ–µ–≥–∫–∏–π –¥–æ—Å—Ç—É–ø</option>
                        <option value="moderate">–°—Ä–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø</option>
                        <option value="difficult">–°–ª–æ–∂–Ω—ã–π –¥–æ—Å—Ç—É–ø</option>
                        <option value="expert">–¢–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                  
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>–õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å—ä–µ–º–∫–∏</Form.Label>
                      <Form.Select
                        name="best_time"
                        value={formData.best_time}
                        onChange={handleInputChange}
                      >
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>
                        <option value="sunrise">–†–∞—Å—Å–≤–µ—Ç</option>
                        <option value="morning">–£—Ç—Ä–æ</option>
                        <option value="noon">–î–µ–Ω—å</option>
                        <option value="afternoon">–ü–æ—Å–ª–µ –ø–æ–ª—É–¥–Ω—è</option>
                        <option value="sunset">–ó–∞–∫–∞—Ç</option>
                        <option value="night">–ù–æ—á—å</option>
                        <option value="any">–õ—é–±–æ–µ –≤—Ä–µ–º—è</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                </Row>

                <Row>
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>–°–ª–æ–∂–Ω–æ—Å—Ç—å —Å—ä–µ–º–∫–∏</Form.Label>
                      <Form.Select
                        name="difficulty"
                        value={formData.difficulty}
                        onChange={handleInputChange}
                      >
                        <option value="1">1 - –û—á–µ–Ω—å –ª–µ–≥–∫–æ</option>
                        <option value="2">2 - –õ–µ–≥–∫–æ</option>
                        <option value="3">3 - –°—Ä–µ–¥–Ω–µ</option>
                        <option value="4">4 - –°–ª–æ–∂–Ω–æ</option>
                        <option value="5">5 - –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ</option>
                      </Form.Select>
                    </Form.Group>
                  </Col>
                  
                  <Col md={6}>
                    <Form.Group className="mb-3">
                      <Form.Label>–¢–µ–≥–∏</Form.Label>
                      <Form.Control
                        type="text"
                        name="tags"
                        value={formData.tags}
                        onChange={handleInputChange}
                        placeholder="–∑–∞–∫–∞—Ç, –ø—Ä–∏—Ä–æ–¥–∞, —Ä–µ–∫–∞ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
                      />
                      <Form.Text className="text-muted">
                        –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∏—Å–∫–∞
                      </Form.Text>
                    </Form.Group>
                  </Col>
                </Row>

                <Form.Group className="mb-4">
                  <Form.Label>–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –Ω–∞ –∫–∞—Ä—Ç–µ *</Form.Label>
                  <div className="border rounded p-2" style={{ minHeight: '350px' }}>
                    <MapComponent
                      center={[55.751244, 37.618423]}
                      zoom={10}
                      height="320px"
                      onLocationSelect={handleLocationSelect}
                      selectedLocation={selectedLocation}
                      interactive={true}
                    />
                  </div>
                  {selectedLocation && (
                    <div className="mt-2">
                      <small className="text-success">
                        ‚úÖ –í—ã–±—Ä–∞–Ω–æ: {selectedLocation.address}
                      </small>
                    </div>
                  )}
                  {validated && !formData.coordinates && (
                    <div className="text-danger mt-1">
                      <small>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –Ω–∞ –∫–∞—Ä—Ç–µ</small>
                    </div>
                  )}
                </Form.Group>

                <div className="d-flex gap-2 justify-content-end">
                  <Button
                    variant="secondary"
                    onClick={() => navigate('/locations')}
                    disabled={loading || creating}
                  >
                    –û—Ç–º–µ–Ω–∞
                  </Button>
                  <Button
                    variant="primary"
                    type="submit"
                    disabled={!isFormValid || loading || creating}
                    size="lg"
                  >
                    {(loading || creating) ? (
                      <>
                        <Spinner animation="border" size="sm" className="me-2" />
                        –°–æ–∑–¥–∞–Ω–∏–µ...
                      </>
                    ) : (
                      'üìç –°–æ–∑–¥–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é'
                    )}
                  </Button>
                </div>
              </Form>
            </Card.Body>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default AddLocationPage;
