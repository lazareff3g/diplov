// client/src/pages/FavoritesPage.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Alert, Spinner, Card, Button } from 'react-bootstrap';
import { Link, useNavigate } from 'react-router-dom';
import { useSelector } from 'react-redux';
import { FaHeart, FaMapMarkedAlt, FaList, FaMapMarkerAlt, FaTrash } from 'react-icons/fa';
import api from '../services/api';
import './FavoritesPage.css';

const FavoritesPage = () => {
  const navigate = useNavigate();
  const { isAuthenticated } = useSelector(state => state.auth);
  
  const [favorites, setFavorites] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [viewMode, setViewMode] = useState('grid'); // 'grid' –∏–ª–∏ 'map'
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (!isAuthenticated) {
      navigate('/login', { state: { from: '/favorites' } });
    }
  }, [isAuthenticated, navigate]);
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π
  useEffect(() => {
    const fetchFavorites = async () => {
      try {
        setLoading(true);
        setError(null);
        
        console.log('üíñ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π...');
        
        const response = await api.get('/favorites');
        
        console.log('üìç –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        if (response.data.success) {
          setFavorites(response.data.favorites || []);
          console.log('‚úÖ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', response.data.favorites?.length || 0);
        } else {
          throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
        }
        
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π:', err);
        setError(err.response?.data?.message || err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏');
        setFavorites([]); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      } finally {
        setLoading(false);
      }
    };
    
    if (isAuthenticated) {
      fetchFavorites();
    }
  }, [isAuthenticated]);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const handleRemoveFromFavorites = async (locationId) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ?')) {
      return;
    }
    
    try {
      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', locationId);
      
      const response = await api.delete(`/favorites/${locationId}`);
      
      if (response.data.success) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setFavorites(prev => prev.filter(fav => fav.id !== locationId));
        console.log('‚úÖ –õ–æ–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
      } else {
        throw new Error(response.data.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è');
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', err);
      alert(err.response?.data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
    }
  };
  
  if (!isAuthenticated) {
    return null; // –†–µ–¥–∏—Ä–µ–∫—Ç –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ useEffect
  }
  
  if (loading) {
    return (
      <Container className="py-5 text-center">
        <Spinner animation="border" role="status">
          <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
        </Spinner>
        <p className="mt-3">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π...</p>
      </Container>
    );
  }
  
  return (
    <Container className="py-4">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h1>
          <FaHeart className="text-danger me-2" />
          –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
        </h1>
        
        {/* –ü–û–ö–ê–ó–´–í–ê–ï–ú –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–¨ –¢–û–õ–¨–ö–û –ï–°–õ–ò –ï–°–¢–¨ –õ–û–ö–ê–¶–ò–ò */}
        {favorites.length > 0 && (
          <div className="view-toggle">
            <Button 
              variant={viewMode === 'grid' ? 'primary' : 'outline-primary'}
              className="me-2"
              onClick={() => setViewMode('grid')}
            >
              <FaList className="me-1" /> –°–ø–∏—Å–æ–∫
            </Button>
            <Button 
              variant={viewMode === 'map' ? 'primary' : 'outline-primary'}
              onClick={() => setViewMode('map')}
            >
              <FaMapMarkedAlt className="me-1" /> –ö–∞—Ä—Ç–∞
            </Button>
          </div>
        )}
      </div>
      
      {error && (
        <Alert variant="danger">
          <Alert.Heading>–û—à–∏–±–∫–∞</Alert.Heading>
          <p>{error}</p>
        </Alert>
      )}
      
      {/* –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ favorites —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º */}
      {!Array.isArray(favorites) || favorites.length === 0 ? (
        <Card className="text-center p-5">
          <Card.Body>
            <FaHeart className="text-muted mb-3" size={48} />
            <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π</h3>
            <p className="text-muted">
              –î–æ–±–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏—Ö –ø–æ–∑–∂–µ
            </p>
            <Link to="/locations" className="btn btn-primary mt-3">
              –ù–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞
            </Link>
          </Card.Body>
        </Card>
      ) : (
        <>
          {/* –°–¢–ê–¢–ò–°–¢–ò–ö–ê */}
          <div className="mb-3">
            <small className="text-muted">
              –ù–∞–π–¥–µ–Ω–æ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π: <strong>{favorites.length}</strong>
            </small>
          </div>
          
          {viewMode === 'grid' ? (
            <Row>
              {favorites.map(location => (
                <Col key={location.id} md={6} lg={4} className="mb-4">
                  <Card className="favorite-card h-100 shadow-sm">
                    <Card.Body>
                      <Card.Title>{location.name}</Card.Title>
                      
                      {/* –ö–ê–¢–ï–ì–û–†–ò–Ø */}
                      {location.category_name && (
                        <div className="mb-2">
                          <span className="badge bg-secondary me-2">
                            {location.category_icon} {location.category_name}
                          </span>
                        </div>
                      )}
                      
                      {/* –û–ü–ò–°–ê–ù–ò–ï */}
                      <Card.Text className="location-description">
                        {location.description && location.description.length > 150 
                          ? `${location.description.substring(0, 150)}...` 
                          : location.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
                      </Card.Text>
                      
                      {/* –ê–î–†–ï–° */}
                      <div className="mb-2">
                        <small className="text-muted">
                          <FaMapMarkerAlt className="me-1 text-danger" />
                          {location.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                        </small>
                      </div>
                      
                      {/* –î–ê–¢–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ò–ó–ë–†–ê–ù–ù–û–ï */}
                      <div className="mb-2">
                        <small className="text-muted">
                          üíñ –î–æ–±–∞–≤–ª–µ–Ω–æ: {new Date(location.favorited_at).toLocaleDateString('ru-RU')}
                        </small>
                      </div>
                    </Card.Body>
                    
                    <Card.Footer className="d-flex justify-content-between">
                      <Link to={`/locations/${location.id}`} className="btn btn-sm btn-primary">
                        –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                      </Link>
                      <Button 
                        variant="outline-danger" 
                        size="sm"
                        onClick={() => handleRemoveFromFavorites(location.id)}
                        title="–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
                      >
                        <FaTrash />
                      </Button>
                    </Card.Footer>
                  </Card>
                </Col>
              ))}
            </Row>
          ) : (
            <div className="map-container">
              {/* –ó–î–ï–°–¨ –ë–£–î–ï–¢ –ö–ê–†–¢–ê - –ü–û–ö–ê –ó–ê–ì–õ–£–®–ö–ê */}
              <Alert variant="info">
                <h5>–ö–∞—Ä—Ç–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π</h5>
                <p>–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–∞—Ä—Ç—ã –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ</p>
              </Alert>
            </div>
          )}
        </>
      )}
    </Container>
  );
};

export default FavoritesPage;
