// client/src/pages/ProfilePage.js - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –õ–û–ö–ê–¶–ò–Ø–ú–ò
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Form, Alert, Modal, Spinner, Badge, Tab, Tabs } from 'react-bootstrap';
import { useSelector, useDispatch } from 'react-redux';
import { Link } from 'react-router-dom';
import { updateUser } from '../redux/slices/authSlice';
import LocationCard from '../components/locations/LocationCard';

const ProfilePage = () => {
  const { user, isAuthenticated } = useSelector(state => state.auth);
  const dispatch = useDispatch();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
  const [showEditModal, setShowEditModal] = useState(false);
  const [formData, setFormData] = useState({
    username: '',
    bio: ''
  });
  const [avatarFile, setAvatarFile] = useState(null);
  const [avatarPreview, setAvatarPreview] = useState(null);
  const [updating, setUpdating] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  // –î–û–ë–ê–í–õ–Ø–ï–ú: –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ª–æ–∫–∞—Ü–∏–π
  const [userLocations, setUserLocations] = useState([]);
  const [locationsLoading, setLocationsLoading] = useState(true);
  const [locationsError, setLocationsError] = useState('');
  const [activeTab, setActiveTab] = useState('profile');

  // –î–û–ë–ê–í–õ–Ø–ï–ú: –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const [stats, setStats] = useState({
    totalLocations: 0,
    totalViews: 0,
    totalLikes: 0,
    joinDate: null
  });

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (user) {
      setFormData({
        username: user.username || '',
        bio: user.bio || ''
      });
      
      const profileImage = user.profile_image || user.profile_picture || user.avatar;
      if (profileImage) {
        let imageUrl;
        if (profileImage.startsWith('http://') || profileImage.startsWith('https://')) {
          imageUrl = profileImage;
        } else if (profileImage.startsWith('/uploads/')) {
          imageUrl = `http://localhost:5000${profileImage}`;
        } else {
          imageUrl = `http://localhost:5000/uploads/profiles/${profileImage}`;
        }
        setAvatarPreview(imageUrl);
      }
    }
  }, [user]);

  // –î–û–ë–ê–í–õ–Ø–ï–ú: –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const fetchUserLocations = async () => {
      if (!user?.id) return;
      
      try {
        setLocationsLoading(true);
        setLocationsError('');
        
        const response = await fetch(`http://localhost:5000/api/locations/user/${user.id}`, {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        });
        
        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π');
        }
        
        const data = await response.json();
        const locations = data.locations || data || [];
        setUserLocations(Array.isArray(locations) ? locations : []);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        setStats(prev => ({
          ...prev,
          totalLocations: locations.length,
          joinDate: user.created_at
        }));
        
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞—Ü–∏–π:', err);
        setLocationsError(err.message);
        setUserLocations([]);
      } finally {
        setLocationsLoading(false);
      }
    };

    if (user?.id) {
      fetchUserLocations();
    }
  }, [user?.id]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 5 * 1024 * 1024) {
        setError('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 5MB');
        return;
      }
      
      if (!file.type.startsWith('image/')) {
        setError('–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        return;
      }
      
      setAvatarFile(file);
      
      const reader = new FileReader();
      reader.onload = (e) => {
        setAvatarPreview(e.target.result);
      };
      reader.readAsDataURL(file);
      
      setError('');
    }
  };

  const handleSave = async () => {
    try {
      setUpdating(true);
      setError('');
      setSuccess('');
      
      const token = localStorage.getItem('token');
      if (!token) {
        setError('–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return;
      }
      
      let updatedUserData = { ...user };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (formData.username !== user.username || formData.bio !== user.bio) {
        const profileResponse = await fetch('http://localhost:5000/api/users/profile', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({
            username: formData.username,
            bio: formData.bio
          })
        });
        
        if (!profileResponse.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è');
        }
        
        updatedUserData = {
          ...updatedUserData,
          username: formData.username,
          bio: formData.bio
        };
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞
      if (avatarFile) {
        const formDataUpload = new FormData();
        formDataUpload.append('image', avatarFile);
        
        const imageResponse = await fetch('http://localhost:5000/api/users/profile/image', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`
          },
          body: formDataUpload
        });
        
        if (!imageResponse.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏');
        }
        
        const imageData = await imageResponse.json();
        
        if (imageData.success && imageData.imageUrl) {
          const fullImageUrl = `http://localhost:5000${imageData.imageUrl}`;
          
          updatedUserData = {
            ...updatedUserData,
            profile_image: fullImageUrl,
            profile_picture: fullImageUrl,
            avatar: fullImageUrl
          };
          
          localStorage.setItem('profileImage', fullImageUrl);
          setAvatarPreview(fullImageUrl);
        }
      }
      
      dispatch(updateUser(updatedUserData));
      
      setSuccess('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
      setAvatarFile(null);
      
      setTimeout(() => {
        setShowEditModal(false);
        setSuccess('');
      }, 1500);
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞:', err);
      setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è');
    } finally {
      setUpdating(false);
    }
  };

  // –î–û–ë–ê–í–õ–Ø–ï–ú: –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏
  const handleDeleteLocation = async (locationId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ª–æ–∫–∞—Ü–∏—é?')) {
      return;
    }

    try {
      const response = await fetch(`http://localhost:5000/api/locations/${locationId}`, {
        method: 'DELETE',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });

      if (response.ok) {
        setUserLocations(prev => prev.filter(loc => loc.id !== locationId));
        setStats(prev => ({
          ...prev,
          totalLocations: prev.totalLocations - 1
        }));
      } else {
        throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏');
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏');
    }
  };

  if (!isAuthenticated || !user) {
    return (
      <Container className="py-4">
        <Alert variant="warning">
          –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
        </Alert>
      </Container>
    );
  }

  return (
    <Container className="py-4">
      <Row>
        <Col>
          <h1 className="mb-4">üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
        </Col>
      </Row>

      {/* –î–û–ë–ê–í–õ–Ø–ï–ú: –í–∫–ª–∞–¥–∫–∏ */}
      <Tabs
        activeKey={activeTab}
        onSelect={(k) => setActiveTab(k)}
        className="mb-4"
      >
        {/* –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è */}
        <Tab eventKey="profile" title="üìã –ü—Ä–æ—Ñ–∏–ª—å">
          <Row>
            <Col md={4}>
              <Card className="mb-4">
                <Card.Body className="text-center">
                  <div className="mb-3">
                    {avatarPreview ? (
                      <img 
                        key={avatarPreview}
                        src={avatarPreview} 
                        alt="–ê–≤–∞—Ç–∞—Ä" 
                        style={{
                          width: '150px',
                          height: '150px',
                          borderRadius: '50%',
                          objectFit: 'cover',
                          border: '3px solid #dee2e6'
                        }}
                        onError={() => setAvatarPreview(null)}
                      />
                    ) : (
                      <div 
                        style={{
                          width: '150px',
                          height: '150px',
                          borderRadius: '50%',
                          backgroundColor: '#f8f9fa',
                          display: 'flex',
                          alignItems: 'center',
                          justifyContent: 'center',
                          margin: '0 auto',
                          fontSize: '48px',
                          color: '#6c757d',
                          border: '3px solid #dee2e6'
                        }}
                      >
                        üë§
                      </div>
                    )}
                    
                    <h4 className="mt-3">{user?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</h4>
                    <p className="text-muted">{user?.email}</p>
                    {user?.bio && <p className="text-muted">{user.bio}</p>}
                    
                    {/* –î–û–ë–ê–í–õ–Ø–ï–ú: –ë–µ–π–¥–∂–∏ */}
                    <div className="mb-3">
                      {user?.role === 'admin' && (
                        <Badge bg="primary" className="me-2">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</Badge>
                      )}
                      <Badge bg="success">–ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</Badge>
                    </div>
                  </div>
                  
                  <Button 
                    variant="primary" 
                    onClick={() => setShowEditModal(true)}
                    className="w-100"
                  >
                    ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                  </Button>
                </Card.Body>
              </Card>

              {/* –î–û–ë–ê–í–õ–Ø–ï–ú: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
              <Card>
                <Card.Header>
                  <h5 className="mb-0">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h5>
                </Card.Header>
                <Card.Body>
                  <div className="d-flex justify-content-between mb-2">
                    <span>–õ–æ–∫–∞—Ü–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ:</span>
                    <Badge bg="primary">{stats.totalLocations}</Badge>
                  </div>
                  <div className="d-flex justify-content-between mb-2">
                    <span>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</span>
                    <small className="text-muted">
                      {stats.joinDate ? new Date(stats.joinDate).toLocaleDateString() : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
                    </small>
                  </div>
                </Card.Body>
              </Card>
            </Col>
            
            <Col md={8}>
              <Card>
                <Card.Header>
                  <h5 className="mb-0">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h5>
                </Card.Header>
                <Card.Body>
                  <Row>
                    <Col md={6}>
                      <p><strong>–ò–º—è:</strong> {user?.username || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                      <p><strong>Email:</strong> {user?.email || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                      <p><strong>–†–æ–ª—å:</strong> {user?.role || 'user'}</p>
                    </Col>
                    <Col md={6}>
                      <p><strong>–ê–≤–∞—Ç–∞—Ä–∫–∞:</strong> {avatarPreview ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' : '‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}</p>
                      <p><strong>–õ–æ–∫–∞—Ü–∏–π:</strong> {stats.totalLocations}</p>
                      <p><strong>–°—Ç–∞—Ç—É—Å:</strong> <Badge bg="success">–ê–∫—Ç–∏–≤–µ–Ω</Badge></p>
                    </Col>
                  </Row>
                  
                  {user?.bio && (
                    <div className="mt-3">
                      <strong>–û —Å–µ–±–µ:</strong>
                      <p className="mt-2 p-3 bg-light rounded">{user.bio}</p>
                    </div>
                  )}
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Tab>

        {/* –î–û–ë–ê–í–õ–Ø–ï–ú: –í–∫–ª–∞–¥–∫–∞ –ª–æ–∫–∞—Ü–∏–π */}
        <Tab eventKey="locations" title={`üìç –ú–æ–∏ –ª–æ–∫–∞—Ü–∏–∏ (${stats.totalLocations})`}>
          <Row>
            <Col>
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h3>üìç –ú–æ–∏ –ª–æ–∫–∞—Ü–∏–∏</h3>
                <Link to="/locations/add">
                  <Button variant="primary">
                    ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ª–æ–∫–∞—Ü–∏—é
                  </Button>
                </Link>
              </div>

              {locationsLoading ? (
                <div className="text-center py-5">
                  <Spinner animation="border" variant="primary" />
                  <p className="mt-3">–ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞—Ü–∏–π...</p>
                </div>
              ) : locationsError ? (
                <Alert variant="danger">
                  <strong>–û—à–∏–±–∫–∞:</strong> {locationsError}
                </Alert>
              ) : userLocations.length === 0 ? (
                <Alert variant="info">
                  <h5>üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π</h5>
                  <p>–ù–∞—á–Ω–∏—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –ª—é–±–∏–º—ã–º–∏ –º–µ—Å—Ç–∞–º–∏ –¥–ª—è —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∏!</p>
                  <Link to="/locations/add">
                    <Button variant="primary">
                      üìç –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –ª–æ–∫–∞—Ü–∏—é
                    </Button>
                  </Link>
                </Alert>
              ) : (
                <Row>
                  {userLocations.map(location => (
                    <Col key={location.id} md={6} lg={4} className="mb-4">
                      <Card className="h-100">
                        <Card.Body>
                          <div className="d-flex justify-content-between align-items-start mb-2">
                            <h6 className="card-title">{location.name}</h6>
                            <div>
                              <Link 
                                to={`/locations/${location.id}/edit`}
                                className="btn btn-sm btn-outline-primary me-2"
                              >
                                ‚úèÔ∏è
                              </Link>
                              <Button
                                size="sm"
                                variant="outline-danger"
                                onClick={() => handleDeleteLocation(location.id)}
                              >
                                üóëÔ∏è
                              </Button>
                            </div>
                          </div>
                          
                          <p className="card-text text-muted small">
                            {location.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
                          </p>
                          
                          <div className="mb-2">
                            {location.category_name && (
                              <Badge bg="secondary" className="me-2">
                                {location.category_name}
                              </Badge>
                            )}
                            {location.accessibility && (
                              <Badge bg="info">
                                {location.accessibility}
                              </Badge>
                            )}
                          </div>
                          
                          <small className="text-muted">
                            –°–æ–∑–¥–∞–Ω–æ: {new Date(location.created_at).toLocaleDateString()}
                          </small>
                          
                          <div className="mt-2">
                            <Link 
                              to={`/locations/${location.id}`}
                              className="btn btn-sm btn-primary w-100"
                            >
                              üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                            </Link>
                          </div>
                        </Card.Body>
                      </Card>
                    </Col>
                  ))}
                </Row>
              )}
            </Col>
          </Row>
        </Tab>

        {/* –î–û–ë–ê–í–õ–Ø–ï–ú: –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
        <Tab eventKey="settings" title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏">
          <Row>
            <Col md={8}>
              <Card>
                <Card.Header>
                  <h5 className="mb-0">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</h5>
                </Card.Header>
                <Card.Body>
                  <h6>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h6>
                  <p className="text-muted">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∞–∫–∫–∞—É–Ω—Ç–∞</p>
                  <Button variant="outline-primary" className="mb-3">
                    –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                  </Button>
                  
                  <hr />
                  
                  <h6>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h6>
                  <Form.Check 
                    type="checkbox" 
                    label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏"
                    defaultChecked 
                    className="mb-2"
                  />
                  <Form.Check 
                    type="checkbox" 
                    label="Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                    defaultChecked 
                    className="mb-2"
                  />
                  
                  <hr />
                  
                  <h6>üóëÔ∏è –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞</h6>
                  <p className="text-muted">–ù–µ–æ–±—Ä–∞—Ç–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º</p>
                  <Button variant="outline-danger">
                    –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                  </Button>
                </Card.Body>
              </Card>
            </Col>
          </Row>
        </Tab>
      </Tabs>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ */}
      <Modal show={showEditModal} onHide={() => setShowEditModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {error && <Alert variant="danger">{error}</Alert>}
          {success && <Alert variant="success">{success}</Alert>}
          
          <Form>
            <div className="text-center mb-4">
              {avatarPreview ? (
                <img 
                  src={avatarPreview} 
                  alt="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä" 
                  style={{
                    width: '120px',
                    height: '120px',
                    borderRadius: '50%',
                    objectFit: 'cover',
                    border: '3px solid #dee2e6'
                  }}
                />
              ) : (
                <div 
                  style={{
                    width: '120px',
                    height: '120px',
                    borderRadius: '50%',
                    backgroundColor: '#f8f9fa',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    margin: '0 auto',
                    fontSize: '40px',
                    color: '#6c757d',
                    border: '3px solid #dee2e6'
                  }}
                >
                  üë§
                </div>
              )}
              
              <div className="mt-3">
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleAvatarChange}
                  style={{ display: 'none' }}
                  id="avatar-upload"
                />
                <label htmlFor="avatar-upload">
                  <Button as="span" variant="outline-primary" size="sm">
                    üì∑ –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ
                  </Button>
                </label>
              </div>
            </div>
            
            <Form.Group className="mb-3">
              <Form.Label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</Form.Label>
              <Form.Control
                type="text"
                name="username"
                value={formData.username}
                onChange={handleInputChange}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>–û —Å–µ–±–µ</Form.Label>
              <Form.Control
                as="textarea"
                rows={3}
                name="bio"
                value={formData.bio}
                onChange={handleInputChange}
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                maxLength={500}
              />
              <Form.Text className="text-muted">
                –û—Å—Ç–∞–ª–æ—Å—å —Å–∏–º–≤–æ–ª–æ–≤: {500 - formData.bio.length}
              </Form.Text>
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button 
            variant="secondary" 
            onClick={() => setShowEditModal(false)}
            disabled={updating}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button 
            variant="primary" 
            onClick={handleSave}
            disabled={updating}
          >
            {updating ? (
              <>
                <Spinner animation="border" size="sm" className="me-2" />
                –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
              </>
            ) : (
              'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'
            )}
          </Button>
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default ProfilePage;
