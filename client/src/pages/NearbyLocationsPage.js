// client/src/pages/NearbyLocationsPage.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Card, Button, Form, Alert, Spinner } from 'react-bootstrap';
import { useNavigate } from 'react-router-dom';
import { FaMapMarkerAlt, FaSearch, FaLocationArrow } from 'react-icons/fa';
import api from '../services/api';
import MapComponent from '../components/map/MapComponent';

const NearbyLocationsPage = () => {
  const navigate = useNavigate();
  
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º locations –∫–∞–∫ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  const [locations, setLocations] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [userLocation, setUserLocation] = useState(null);
  const [searchRadius, setSearchRadius] = useState(10);
  const [gettingLocation, setGettingLocation] = useState(false);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getCurrentLocation = () => {
    setGettingLocation(true);
    setError('');

    if (!navigator.geolocation) {
      setError('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
      setGettingLocation(false);
      return;
    }

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude } = position.coords;
        setUserLocation({ latitude, longitude });
        setGettingLocation(false);
        console.log('‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', { latitude, longitude });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ–º –ª–æ–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        searchNearbyLocations(latitude, longitude, searchRadius);
      },
      (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
        setGettingLocation(false);
        
        switch (error.code) {
          case error.PERMISSION_DENIED:
            setError('–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é.');
            break;
          case error.POSITION_UNAVAILABLE:
            setError('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
            break;
          case error.TIMEOUT:
            setError('–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.');
            break;
          default:
            setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.');
            break;
        }
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 300000 // 5 –º–∏–Ω—É—Ç
      }
    );
  };

  // –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π
  const searchNearbyLocations = async (lat, lng, radius) => {
    try {
      setLoading(true);
      setError('');
      
      console.log('üîç –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π:', { lat, lng, radius });
      
      const response = await api.get('/locations/nearby', {
        params: {
          latitude: lat,
          longitude: lng,
          radius: radius
        }
      });
      
      console.log('üìç –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data);
      
      if (response.data.success) {
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ locations —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
        const nearbyLocations = Array.isArray(response.data.locations) 
          ? response.data.locations 
          : [];
          
        setLocations(nearbyLocations);
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π:', nearbyLocations.length);
      } else {
        throw new Error(response.data.message || '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞—Ü–∏–π');
      }
      
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π:', err);
      setError(err.response?.data?.message || err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π');
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏ –æ—à–∏–±–∫–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      setLocations([]);
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞
  const handleRadiusChange = (newRadius) => {
    setSearchRadius(newRadius);
    
    if (userLocation) {
      searchNearbyLocations(userLocation.latitude, userLocation.longitude, newRadius);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
  const handleLocationSelect = (locationData) => {
    // –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞—Ü–∏—é –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    const foundLocation = locations.find(loc => 
      Math.abs(loc.latitude - locationData.coordinates[0]) < 0.001 &&
      Math.abs(loc.longitude - locationData.coordinates[1]) < 0.001
    );
    
    if (foundLocation) {
      navigate(`/locations/${foundLocation.id}`);
    }
  };

  return (
    <Container className="py-4">
      {/* –ó–ê–ì–û–õ–û–í–û–ö */}
      <Row className="mb-4">
        <Col>
          <h1>
            <FaLocationArrow className="me-2 text-primary" />
            –ë–ª–∏–∂–∞–π—à–∏–µ –ª–æ–∫–∞—Ü–∏–∏
          </h1>
          <p className="text-muted">
            –ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏
          </p>
        </Col>
      </Row>

      {/* –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–ò–°–ö–û–ú */}
      <Card className="mb-4">
        <Card.Header>
          <h5 className="mb-0">üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞</h5>
        </Card.Header>
        <Card.Body>
          <Row className="align-items-end">
            <Col md={4}>
              <Form.Group className="mb-3">
                <Form.Label>–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞</Form.Label>
                <Form.Select 
                  value={searchRadius} 
                  onChange={(e) => handleRadiusChange(parseInt(e.target.value))}
                >
                  <option value={1}>1 –∫–º</option>
                  <option value={5}>5 –∫–º</option>
                  <option value={10}>10 –∫–º</option>
                  <option value={25}>25 –∫–º</option>
                  <option value={50}>50 –∫–º</option>
                </Form.Select>
              </Form.Group>
            </Col>
            
            <Col md={4}>
              <Button 
                variant="primary" 
                onClick={getCurrentLocation}
                disabled={gettingLocation}
                className="w-100"
              >
                {gettingLocation ? (
                  <>
                    <Spinner animation="border" size="sm" className="me-2" />
                    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...
                  </>
                ) : (
                  <>
                    <FaLocationArrow className="me-2" />
                    –ù–∞–π—Ç–∏ –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                  </>
                )}
              </Button>
            </Col>
            
            <Col md={4}>
              {userLocation && (
                <div className="text-success">
                  <small>
                    ‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ
                    <br />
                    üìç {userLocation.latitude.toFixed(4)}, {userLocation.longitude.toFixed(4)}
                  </small>
                </div>
              )}
            </Col>
          </Row>
        </Card.Body>
      </Card>

      {/* –û–®–ò–ë–ö–ò */}
      {error && (
        <Alert variant="danger" className="mb-4">
          <Alert.Heading>–û—à–∏–±–∫–∞</Alert.Heading>
          <p>{error}</p>
        </Alert>
      )}

      {/* –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê */}
      {loading ? (
        <div className="text-center py-5">
          <Spinner animation="border" variant="primary" />
          <p className="mt-3">–ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π...</p>
        </div>
      ) : (
        <>
          {/* –°–¢–ê–¢–ò–°–¢–ò–ö–ê */}
          {userLocation && (
            <Row className="mb-4">
              <Col>
                <Alert variant="info">
                  <h6 className="mb-2">üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h6>
                  <p className="mb-0">
                    –ù–∞–π–¥–µ–Ω–æ <strong>{locations.length}</strong> –ª–æ–∫–∞—Ü–∏–π 
                    –≤ —Ä–∞–¥–∏—É—Å–µ <strong>{searchRadius} –∫–º</strong> –æ—Ç –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
                  </p>
                </Alert>
              </Col>
            </Row>
          )}

          {/* –ö–ê–†–¢–ê */}
          {userLocation && (
            <Row className="mb-4">
              <Col>
                <Card>
                  <Card.Header>
                    <h5 className="mb-0">üó∫Ô∏è –ö–∞—Ä—Ç–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π</h5>
                  </Card.Header>
                  <Card.Body style={{ padding: 0 }}>
                    <MapComponent
                      center={[userLocation.latitude, userLocation.longitude]}
                      zoom={12}
                      height="500px"
                      locations={locations}
                      userLocation={userLocation}
                      onLocationSelect={handleLocationSelect}
                      interactive={true}
                    />
                  </Card.Body>
                </Card>
              </Col>
            </Row>
          )}

          {/* –°–ü–ò–°–û–ö –õ–û–ö–ê–¶–ò–ô */}
          <Row>
            <Col>
              <h4>üìã –°–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π</h4>
              
              {/* –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ locations —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º map */}
              {Array.isArray(locations) && locations.length === 0 ? (
                <Alert variant="info">
                  <Alert.Heading>–õ–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</Alert.Heading>
                  <p>
                    {userLocation 
                      ? '–í —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è —Ñ–æ—Ç–æ—Å—ä–µ–º–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞.'
                      : '–°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π.'
                    }
                  </p>
                </Alert>
              ) : (
                <Row>
                  {/* –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ map —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π */}
                  {Array.isArray(locations) && locations.map((location) => (
                    <Col md={6} lg={4} key={location.id} className="mb-4">
                      <Card className="h-100">
                        <Card.Body>
                          <Card.Title>{location.name}</Card.Title>
                          <Card.Text>
                            {location.description ? 
                              location.description.substring(0, 100) + '...' : 
                              '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                            }
                          </Card.Text>
                          
                          <div className="mb-2">
                            <small className="text-muted">
                              <FaMapMarkerAlt className="me-1 text-danger" />
                              {location.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'}
                            </small>
                          </div>
                          
                          {location.distance_km && (
                            <div className="mb-2">
                              <small className="text-primary">
                                üìè –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {location.distance_km.toFixed(1)} –∫–º
                              </small>
                            </div>
                          )}
                          
                          <Button 
                            variant="primary" 
                            className="w-100"
                            onClick={() => navigate(`/locations/${location.id}`)}
                          >
                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                          </Button>
                        </Card.Body>
                      </Card>
                    </Col>
                  ))}
                </Row>
              )}
            </Col>
          </Row>
        </>
      )}
    </Container>
  );
};

export default NearbyLocationsPage;
