// client/src/pages/NearbyLocationsPage.js
import React, { useState, useEffect } from 'react';
import { Container, Row, Col, Button, Alert, Spinner, Form } from 'react-bootstrap';
import { YMaps, Map, Placemark, Clusterer } from '@pbe/react-yandex-maps';
import LocationList from '../components/locations/LocationList';
import api from '../services/api';

const NearbyLocationsPage = () => {
  const [locations, setLocations] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [userLocation, setUserLocation] = useState(null);
  const [radius, setRadius] = useState(10);

  // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ distance
  const safeDistance = (distance) => {
    if (typeof distance === 'number') {
      return distance.toFixed(1);
    }
    if (typeof distance === 'string') {
      const num = parseFloat(distance);
      return isNaN(num) ? '0.0' : num;
    }
    return '0.0';
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (navigator.geolocation) {
      setLoading(true);
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setUserLocation({ latitude, longitude });
          fetchNearbyLocations(latitude, longitude, radius);
        },
        (error) => {
          console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.');
          setLoading(false);
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 60000
        }
      );
    } else {
      setError('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
    }
  }, []);

  // –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π
  const fetchNearbyLocations = async (latitude, longitude, searchRadius) => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await api.get('/locations/nearby', {
        params: {
          latitude,
          longitude,
          radius: searchRadius
        }
      });
      
      setLocations(response.data);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –ª–æ–∫–∞—Ü–∏–∏');
      setLocations([]);
    } finally {
      setLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞
  const handleRadiusChange = (newRadius) => {
    setRadius(newRadius);
    if (userLocation) {
      fetchNearbyLocations(userLocation.latitude, userLocation.longitude, newRadius);
    }
  };

  return (
    <Container className="py-4">
      <h1 className="mb-4">üó∫Ô∏è –õ–æ–∫–∞—Ü–∏–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏</h1>
      
      {/* –ö–æ–Ω—Ç—Ä–æ–ª—ã —Ä–∞–¥–∏—É—Å–∞ –ø–æ–∏—Å–∫–∞ */}
      <Row className="mb-4">
        <Col md={6}>
          <Form.Group>
            <Form.Label>–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞: {radius} –∫–º</Form.Label>
            <Form.Range
              min={1}
              max={50}
              value={radius}
              onChange={(e) => handleRadiusChange(parseInt(e.target.value))}
            />
            <div className="d-flex justify-content-between">
              <small>1 –∫–º</small>
              <small>50 –∫–º</small>
            </div>
          </Form.Group>
        </Col>
        <Col md={6} className="d-flex align-items-end">
          <Button 
            variant="outline-primary"
            onClick={() => userLocation && fetchNearbyLocations(userLocation.latitude, userLocation.longitude, radius)}
            disabled={!userLocation || loading}
          >
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫
          </Button>
        </Col>
      </Row>

      {/* –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö */}
      {error && (
        <Alert variant="danger" className="mb-4">
          {error}
        </Alert>
      )}

      {/* –ö–∞—Ä—Ç–∞ —Å –ª–æ–∫–∞—Ü–∏—è–º–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ */}
      {userLocation && (
        <Row className="mb-4">
          <Col md={12}>
            <div style={{ 
              width: '100%', 
              height: '500px', 
              border: '1px solid #ddd', 
              borderRadius: '8px', 
              overflow: 'hidden' 
            }}>
              <YMaps>
                <Map
                  defaultState={{ 
                    center: [userLocation.latitude, userLocation.longitude], 
                    zoom: 12 
                  }}
                  style={{ width: '100%', height: '100%' }}
                  options={{
                    suppressMapOpenBlock: true,
                    autoFitToViewport: 'always'
                  }}
                >
                  {/* –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –º–µ—Ç–æ–∫ */}
                  <Clusterer
                    options={{
                      preset: 'islands#invertedVioletClusterIcons',
                      groupByCoordinates: false,
                    }}
                  >
                    {/* –ú–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è */}
                    <Placemark
                      geometry={[userLocation.latitude, userLocation.longitude]}
                      properties={{
                        balloonContent: '–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
                        hintContent: '–í—ã –∑–¥–µ—Å—å'
                      }}
                      options={{
                        preset: 'islands#geolocationIcon',
                        iconColor: '#0077ff'
                      }}
                    />
                    
                    {/* –ú–µ—Ç–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–æ–π distance */}
                    {locations.map((location) => (
                      <Placemark
                        key={location.id}
                        geometry={[location.latitude, location.longitude]}
                        properties={{
                          balloonContent: `
                            <div style="max-width: 300px;">
                              <h4>${location.name}</h4>
                              <p>${location.description ? location.description.substring(0, 100) + '...' : ''}</p>
                              <p><strong>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</strong> ${safeDistance(location.distance)} –∫–º</p>
                              <a href="/locations/${location.id}" target="_blank">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                            </div>
                          `,
                          hintContent: location.name
                        }}
                        options={{
                          preset: 'islands#violetIcon'
                        }}
                      />
                    ))}
                  </Clusterer>
                </Map>
              </YMaps>
            </div>
          </Col>
        </Row>
      )}

      {/* –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π */}
      <Row>
        <Col md={12}>
          {loading ? (
            <div className="text-center py-5">
              <Spinner animation="border" role="status">
                <span className="visually-hidden">–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–π...</span>
              </Spinner>
              <p className="mt-3 text-muted">–ò—â–µ–º –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏...</p>
            </div>
          ) : locations.length === 0 ? (
            <Alert variant="info">
              <Alert.Heading>–õ–æ–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</Alert.Heading>
              <p>–í —Ä–∞–¥–∏—É—Å–µ {radius} –∫–º –æ—Ç –≤–∞—à–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.</p>
              <hr />
              <p className="mb-0">
                üí° <strong>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</strong> –£–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.
              </p>
            </Alert>
          ) : (
            <>
              <h3>–ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞—Ü–∏–π: {locations.length}</h3>
              <LocationList 
                locations={locations}
                loading={false}
                error={null}
              />
            </>
          )}
        </Col>
      </Row>
    </Container>
  );
};

export default NearbyLocationsPage;
