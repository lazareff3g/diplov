const locationModel = require('../models/locationModel');

exports.getLocations = async (req, res) => {
  try {
    const {
      category_id,
      best_time_of_day,
      best_season,
      accessibility,
      difficulty_level,
      permission_required,
      search,
      page = 1,
      limit = 10
    } = req.query;
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const filters = {};
    
    if (category_id) filters.category_id = category_id;
    if (best_time_of_day) filters.best_time_of_day = best_time_of_day;
    if (best_season) filters.best_season = best_season;
    if (accessibility) filters.accessibility = accessibility;
    if (difficulty_level) filters.difficulty_level = difficulty_level;
    if (permission_required !== undefined) filters.permission_required = permission_required === 'true';
    if (search) filters.search = search;
    
    // –ü–æ–ª—É—á–∞–µ–º –ª–æ–∫–∞—Ü–∏–∏ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const result = await locationModel.getLocations(filters, parseInt(page), parseInt(limit));
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
    if (result.locations) {
      result.locations = result.locations.map(location => ({
        ...location,
        latitude: location.latitude || (location.coordinates ? location.coordinates.coordinates[1] : null),
        longitude: location.longitude || (location.coordinates ? location.coordinates.coordinates[0] : null)
      }));
    }
    
    res.json(result);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–π', error: err.message });
  }
};

exports.getLocationById = async (req, res) => {
  try {
    const location = await locationModel.getLocationById(req.params.id);
    
    if (!location) {
      return res.status(404).json({ message: '–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏
    const processedLocation = {
      ...location,
      latitude: location.latitude || (location.coordinates ? location.coordinates.coordinates[1] : null),
      longitude: location.longitude || (location.coordinates ? location.coordinates.coordinates[0] : null)
    };
    
    res.json(processedLocation);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏', error: err.message });
  }
};

exports.createLocation = async (req, res) => {
  try {
    const {
      name,
      description,
      coordinates,
      latitude,
      longitude,
      address,
      category_id,
      best_time_of_day,
      best_season,
      accessibility,
      difficulty_level,
      permission_required
    } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !description || !address || !category_id) {
      return res.status(400).json({ message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª–∏–±–æ coordinates, –ª–∏–±–æ latitude/longitude
    if (!coordinates && (!latitude || !longitude)) {
      return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã' });
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
    const locationData = {
      name,
      description,
      coordinates: coordinates || { type: 'Point', coordinates: [longitude, latitude] },
      latitude: latitude || (coordinates ? coordinates.coordinates[1] : null),
      longitude: longitude || (coordinates ? coordinates.coordinates[0] : null),
      address,
      category_id,
      best_time_of_day,
      best_season,
      accessibility,
      difficulty_level,
      permission_required: permission_required || false,
      created_by: req.user.id
    };
    
    const location = await locationModel.createLocation(locationData);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ
    const processedLocation = {
      ...location,
      latitude: location.latitude || (location.coordinates ? location.coordinates.coordinates[1] : null),
      longitude: location.longitude || (location.coordinates ? location.coordinates.coordinates[0] : null)
    };
    
    res.status(201).json(processedLocation);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏', error: err.message });
  }
};

exports.updateLocation = async (req, res) => {
  try {
    const location = await locationModel.getLocationById(req.params.id);
    
    if (!location) {
      return res.status(404).json({ message: '–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if (location.created_by !== req.user.id && req.user.role !== 'admin') {
      return res.status(403).json({ message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏' });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = { ...req.body };
    if (updateData.latitude && updateData.longitude) {
      updateData.coordinates = { 
        type: 'Point', 
        coordinates: [updateData.longitude, updateData.latitude] 
      };
    }
    
    const updatedLocation = await locationModel.updateLocation(req.params.id, updateData);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ
    const processedLocation = {
      ...updatedLocation,
      latitude: updatedLocation.latitude || (updatedLocation.coordinates ? updatedLocation.coordinates.coordinates[1] : null),
      longitude: updatedLocation.longitude || (updatedLocation.coordinates ? updatedLocation.coordinates.coordinates[0] : null)
    };
    
    res.json(processedLocation);
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏', error: err.message });
  }
};

exports.deleteLocation = async (req, res) => {
  try {
    const location = await locationModel.getLocationById(req.params.id);
    
    if (!location) {
      return res.status(404).json({ message: '–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    if (location.created_by !== req.user.id && req.user.role !== 'admin') {
      return res.status(403).json({ message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏' });
    }
    
    await locationModel.deleteLocation(req.params.id);
    
    res.json({ message: '–õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏', error: err.message });
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–æ–π distance
exports.getNearbyLocations = async (req, res) => {
  try {
    const { latitude, longitude, radius = 10 } = req.query;
    
    console.log('üîç –ó–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:', {
      latitude: parseFloat(latitude),
      longitude: parseFloat(longitude),
      radius: parseFloat(radius)
    });
    
    if (!latitude || !longitude) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
      return res.status(400).json({ message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    const lat = parseFloat(latitude);
    const lng = parseFloat(longitude);
    const rad = parseFloat(radius);
    
    if (isNaN(lat) || isNaN(lng) || isNaN(rad)) {
      console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:', { lat, lng, rad });
      return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã' });
    }
    
    if (lat < -90 || lat > 90 || lng < -180 || lng > 180) {
      console.log('‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞:', { lat, lng });
      return res.status(400).json({ message: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞' });
    }
    
    console.log('‚úÖ –í—ã–∑—ã–≤–∞–µ–º locationModel.getNearbyLocations...');
    const locations = await locationModel.getNearbyLocations(lat, lng, rad);
    
    console.log(`üìç –ü–æ–ª—É—á–µ–Ω–æ ${locations.length} –ª–æ–∫–∞—Ü–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö`);
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞—Ü–∏–∏
    const processedLocations = locations.map(location => {
      const processed = {
        ...location,
        latitude: location.latitude || (location.coordinates ? location.coordinates.coordinates[1] : null),
        longitude: location.longitude || (location.coordinates ? location.coordinates.coordinates[0] : null),
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ distance
        distance: (() => {
          if (!location.distance) return '0.00';
          
          const dist = parseFloat(location.distance);
          if (isNaN(dist)) return '0.00';
          
          return dist.toFixed(2);
        })()
      };
      
      console.log(`üìå –õ–æ–∫–∞—Ü–∏—è: ${location.name}, —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${processed.distance} –∫–º`);
      return processed;
    });
    
    console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${processedLocations.length} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π`);
    res.json(processedLocations);
    
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π:', err);
    res.status(500).json({ 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–∏–∂–∞–π—à–∏—Ö –ª–æ–∫–∞—Ü–∏–π', 
      error: err.message,
      details: process.env.NODE_ENV === 'development' ? err.stack : undefined
    });
  }
};
