// middleware/auth.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú
const jwt = require('jsonwebtoken');
const userModel = require('../models/userModel');

exports.protect = async (req, res, next) => {
  let token;

  console.log('üîê Middleware protect: –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏');
  console.log('üîê Headers authorization:', req.headers.authorization);
  console.log('üîê URL:', req.originalUrl);
  console.log('üîê Method:', req.method);

  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
      token = req.headers.authorization.split(' ')[1];
      console.log('üîë –¢–æ–∫–µ–Ω –∏–∑–≤–ª–µ—á–µ–Ω:', token ? '–î–ê' : '–ù–ï–¢');
      console.log('üîë –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞:', token ? token.length : 0);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —Å JWT_SECRET...');
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      console.log('‚úÖ –¢–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω:', decoded);

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      console.log('üë§ –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø–æ ID:', decoded.id);
      const user = await userModel.findUserById(decoded.id);
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user ? '–î–ê' : '–ù–ï–¢');
      
      if (user) {
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
          id: user.id,
          username: user.username,
          email: user.email,
          role: user.role
        });
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!user) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
        return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      req.user = user;
      console.log('‚úÖ Middleware protect: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ req.user');
      next();
    } catch (error) {
      console.error('‚ùå JWT Error:', error);
      console.error('‚ùå Error name:', error.name);
      console.error('‚ùå Error message:', error.message);
      console.error('‚ùå Stack trace:', error.stack);
      
      // –£–õ–£–ß–®–ï–ù–ò–ï: –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ JWT
      if (error.name === 'TokenExpiredError') {
        console.log('‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫');
        return res.status(401).json({ message: '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫' });
      } else if (error.name === 'JsonWebTokenError') {
        console.log('‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω');
        return res.status(401).json({ message: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
      } else if (error.name === 'NotBeforeError') {
        console.log('‚ùå –¢–æ–∫–µ–Ω –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
        return res.status(401).json({ message: '–¢–æ–∫–µ–Ω –µ—â–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω' });
      } else {
        console.log('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        return res.status(401).json({ message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' });
      }
    }
  } else {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–Ω–µ—Å –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞
    console.log('‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö');
    console.log('‚ùå Authorization header:', req.headers.authorization);
    return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
  }
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.authorize = (...roles) => {  // –£–õ–£–ß–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º rest –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  return (req, res, next) => {
    console.log('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    console.log('üîí –¢—Ä–µ–±—É–µ–º—ã–µ —Ä–æ–ª–∏:', roles);
    console.log('üîí –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user?.role);
    
    if (!req.user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏');
      return res.status(401).json({ message: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' });
    }

    if (!roles.includes(req.user.role)) {
      console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤:', req.user.role, '–Ω–µ –≤', roles);
      return res.status(403).json({ 
        message: `–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–æ–ª—å: ${roles.join(' –∏–ª–∏ ')}` 
      });
    }

    console.log('‚úÖ –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ö–æ–¥–∏—Ç');
    next();
  };
};

// –î–û–ü–û–õ–ù–ï–ù–ò–ï: Middleware –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
exports.optionalAuth = async (req, res, next) => {
  let token;

  console.log('üîì Optional auth: –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏');

  if (req.headers.authorization && req.headers.authorization.startsWith('Bearer')) {
    try {
      token = req.headers.authorization.split(' ')[1];
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      const user = await userModel.findUserById(decoded.id);
      
      if (user) {
        req.user = user;
        console.log('‚úÖ Optional auth: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
      } else {
        console.log('‚ö†Ô∏è Optional auth: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      console.log('‚ö†Ô∏è Optional auth failed:', error.message);
    }
  } else {
    console.log('‚ö†Ô∏è Optional auth: —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
  }

  next();
};

// –î–û–ë–ê–í–õ–ï–ù–ò–ï: Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT_SECRET
exports.checkJWTSecret = (req, res, next) => {
  console.log('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT_SECRET...');
  console.log('üîê JWT_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', !!process.env.JWT_SECRET);
  console.log('üîê JWT_SECRET –¥–ª–∏–Ω–∞:', process.env.JWT_SECRET ? process.env.JWT_SECRET.length : 0);
  
  if (!process.env.JWT_SECRET) {
    console.error('‚ùå JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
  
  next();
};
