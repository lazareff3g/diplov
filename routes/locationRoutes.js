// routes/locationRoutes.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° PUT –ú–ê–†–®–†–£–¢–û–ú
const express = require('express');
const router = express.Router();
const {
  getLocations,
  getLocationById,
  createLocation,
  updateLocation,
  deleteLocation,
  getNearbyLocations,
  getUserLocations
} = require('../controllers/locationController');
const { protect } = require('../middleware/auth');

// –í–ê–ñ–ù–û: –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–ï–†–ï–î –æ–±—â–∏–º–∏
router.get('/nearby', getNearbyLocations);
router.get('/user/:userId', getUserLocations);

// –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
router.get('/', getLocations);
router.get('/:id', getLocationById);

// –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (—Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
router.post('/', protect, createLocation);
router.put('/:id', protect, updateLocation);
router.delete('/:id', protect, deleteLocation);

// –î–û–ë–ê–í–õ–ï–ù–ò–ï: –ü—Ä—è–º–æ–π PUT –º–∞—Ä—à—Ä—É—Ç —Å –ø–æ–ª–Ω–æ–π –ª–æ–≥–∏–∫–æ–π (–µ—Å–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
router.put('/:id', protect, async (req, res) => {
  try {
    const locationId = req.params.id;
    const userId = req.user.id;
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:', locationId);
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userId);
    console.log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', req.body);
    
    const { 
      name, 
      description, 
      coordinates, 
      address, 
      category_id, 
      accessibility, 
      best_time_of_day, 
      difficulty_level, 
      tags 
    } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!name || !name.trim()) {
      return res.status(400).json({
        success: false,
        message: '–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      });
    }
    
    if (!coordinates || !Array.isArray(coordinates) || coordinates.length !== 2) {
      return res.status(400).json({
        success: false,
        message: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∏–∑ –¥–≤—É—Ö —á–∏—Å–µ–ª'
      });
    }
    
    const { pool } = require('../db');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–∫–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const checkQuery = `
      SELECT id, created_by 
      FROM locations 
      WHERE id = $1
    `;
    
    const checkResult = await pool.query(checkQuery, [locationId]);
    
    if (checkResult.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: '–õ–æ–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    const location = checkResult.rows[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (location.created_by !== userId && req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏'
      });
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    const updateQuery = `
      UPDATE locations 
      SET 
        name = $1,
        description = $2,
        coordinates = ST_SetSRID(ST_MakePoint($3, $4), 4326),
        address = $5,
        category_id = $6,
        accessibility = $7,
        best_time_of_day = $8,
        difficulty_level = $9,
        tags = $10,
        updated_at = CURRENT_TIMESTAMP
      WHERE id = $11
      RETURNING 
        id, 
        name, 
        description, 
        ST_X(coordinates) as longitude,
        ST_Y(coordinates) as latitude,
        address,
        category_id,
        accessibility,
        best_time_of_day,
        difficulty_level,
        tags,
        created_by,
        created_at,
        updated_at
    `;
    
    const updateResult = await pool.query(updateQuery, [
      name.trim(),
      description?.trim() || null,
      coordinates[1], // longitude
      coordinates[0], // latitude
      address || null,
      category_id || null,
      accessibility || null,
      best_time_of_day || null,
      difficulty_level || 1,
      tags || null,
      locationId
    ]);
    
    if (updateResult.rows.length === 0) {
      return res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏'
      });
    }
    
    const updatedLocation = updateResult.rows[0];
    
    console.log('‚úÖ –õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', updatedLocation);
    
    res.json({
      success: true,
      message: '–õ–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
      location: updatedLocation
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–æ–∫–∞—Ü–∏–∏:', error);
    console.error('‚ùå Stack trace:', error.stack);
    
    res.status(500).json({
      success: false,
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
});

module.exports = router;
