// routes/photoRoutes.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• –ò –£–î–ê–õ–ï–ù–ò–ï–ú
const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const router = express.Router();
const { protect } = require('../middleware/auth');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadPath = path.join(__dirname, '../uploads/photos');
    
    if (!fs.existsSync(uploadPath)) {
      fs.mkdirSync(uploadPath, { recursive: true });
    }
    
    cb(null, uploadPath);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    const fileExtension = path.extname(file.originalname);
    cb(null, 'photo-' + uniqueSuffix + fileExtension);
  }
});

const upload = multer({
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'), false);
    }
  }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
router.get('/location/:locationId', async (req, res) => {
  try {
    const { locationId } = req.params;
    console.log('üì∏ –ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏:', locationId);
    
    const { pool } = require('../db');
    
    // –†–ï–ê–õ–¨–ù–´–ô –ó–ê–ü–†–û–° –ö –ë–ê–ó–ï –î–ê–ù–ù–´–•
    const result = await pool.query(`
      SELECT 
        p.id,
        p.url,
        p.description,
        p.user_id,
        p.created_at,
        u.username
      FROM photos p
      LEFT JOIN users u ON p.user_id = u.id
      WHERE p.location_id = $1
      ORDER BY p.created_at DESC
    `, [locationId]);
    
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', result.rows.length);
    
    res.json({
      success: true,
      photos: result.rows
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'
    });
  }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
router.post('/', protect, upload.single('photo'), async (req, res) => {
  try {
    const { location_id, description } = req.body;
    const userId = req.user.id;
    
    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω'
      });
    }
    
    const photoUrl = `/uploads/photos/${req.file.filename}`;
    
    console.log('üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –ë–î:', { 
      location_id, 
      description, 
      userId, 
      filename: req.file.filename,
      url: photoUrl 
    });
    
    const { pool } = require('../db');
    
    // –°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –î–ê–ù–ù–´–•
    const result = await pool.query(`
      INSERT INTO photos (location_id, user_id, url, description)
      VALUES ($1, $2, $3, $4)
      RETURNING 
        id, 
        location_id,
        user_id,
        url,
        description,
        created_at
    `, [location_id, userId, photoUrl, description || null]);
    
    const savedPhoto = result.rows[0];
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await pool.query('SELECT username FROM users WHERE id = $1', [userId]);
    savedPhoto.username = userResult.rows[0]?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    
    console.log('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î:', savedPhoto);
    
    res.status(201).json({
      success: true,
      message: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
      photo: savedPhoto
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'
    });
  }
});

// –î–û–ë–ê–í–õ–ï–ù–û: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
router.delete('/:photoId', protect, async (req, res) => {
  try {
    const { photoId } = req.params;
    const userId = req.user.id;
    
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', { photoId, userId });
    
    const { pool } = require('../db');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    const photoResult = await pool.query(`
      SELECT id, url, user_id 
      FROM photos 
      WHERE id = $1
    `, [photoId]);
    
    if (photoResult.rows.length === 0) {
      return res.status(404).json({
        success: false,
        message: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    const photo = photoResult.rows[0];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (photo.user_id !== userId) {
      return res.status(403).json({
        success: false,
        message: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'
      });
    }
    
    // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
    const filePath = path.join(__dirname, '..', photo.url);
    if (fs.existsSync(filePath)) {
      fs.unlinkSync(filePath);
      console.log('‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω —Å –¥–∏—Å–∫–∞:', filePath);
    }
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await pool.query('DELETE FROM photos WHERE id = $1', [photoId]);
    
    console.log('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î');
    
    res.json({
      success: true,
      message: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'
    });
  }
});

module.exports = router;
