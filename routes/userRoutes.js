// routes/userRoutes.js - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ú–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò
const express = require('express');
const router = express.Router();
const { registerUser, loginUser, getUserProfile } = require('../controllers/userController');
const { protect } = require('../middleware/auth');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const uploadDir = 'uploads/profiles/';
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
  console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞:', uploadDir);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: function(req, file, cb) {
    cb(null, uploadDir);
  },
  filename: function(req, file, cb) {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, `avatar-${uniqueSuffix}${path.extname(file.originalname)}`);
  }
});

const upload = multer({ 
  storage: storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB
  fileFilter: function(req, file, cb) {
    const filetypes = /jpeg|jpg|png|gif|webp/;
    const mimetype = filetypes.test(file.mimetype);
    const extname = filetypes.test(path.extname(file.originalname).toLowerCase());
    
    if (mimetype && extname) {
      return cb(null, true);
    }
    cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ jpeg, jpg, png, gif –∏ webp!'));
  }
});

// –ë–∞–∑–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
router.post('/register', registerUser);
router.post('/login', loginUser);
router.get('/profile', protect, getUserProfile);

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
router.put('/profile', protect, async (req, res) => {
  try {
    const { username, bio } = req.body;
    const userId = req.user.id;
    
    console.log('üë§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
    console.log('üìù –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', { username, bio });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!username || username.trim().length === 0) {
      return res.status(400).json({ 
        success: false, 
        message: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' 
      });
    }
    
    const { pool } = require('../db');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if (!pool) {
      throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const updateQuery = `
      UPDATE users 
      SET username = $1, bio = $2, updated_at = CURRENT_TIMESTAMP 
      WHERE id = $3 
      RETURNING id, username, email, bio, role, profile_image, created_at
    `;
    
    const result = await pool.query(updateQuery, [username.trim(), bio || '', userId]);
    
    if (result.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
    
    const updatedUser = result.rows[0];
    
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedUser);
    
    res.json({
      success: true,
      message: '–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
      user: updatedUser
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
    console.error('‚ùå Stack trace:', error.stack);
    res.status(500).json({ 
      success: false, 
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error'
    });
  }
});

// –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
router.post('/profile/image', protect, upload.single('image'), async (req, res) => {
  try {
    console.log('üì∏ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏');
    console.log('üìÅ –§–∞–π–ª:', req.file ? {
      filename: req.file.filename,
      size: req.file.size,
      mimetype: req.file.mimetype,
      path: req.file.path
    } : '–ù–ï–¢ –§–ê–ô–õ–ê');
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.user ? { id: req.user.id, username: req.user.username } : '–ù–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
    
    if (!req.file) {
      console.log('‚ùå –§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω');
      return res.status(400).json({ 
        success: false, 
        message: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' 
      });
    }
    
    if (!req.user || !req.user.id) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return res.status(401).json({ 
        success: false, 
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' 
      });
    }
    
    const userId = req.user.id;
    const imageUrl = `/uploads/profiles/${req.file.filename}`;
    
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î:', { userId, imageUrl });
    
    const { pool } = require('../db');
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    if (!pool) {
      console.error('‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const userCheckQuery = 'SELECT id FROM users WHERE id = $1';
    const userCheck = await pool.query(userCheckQuery, [userId]);
    
    if (userCheck.rows.length === 0) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', userId);
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –ë–î');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    const updateQuery = `
      UPDATE users 
      SET profile_image = $1, updated_at = CURRENT_TIMESTAMP 
      WHERE id = $2 
      RETURNING id, username, email, bio, role, profile_image
    `;
    
    console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å:', updateQuery);
    console.log('üîÑ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', [imageUrl, userId]);
    
    const result = await pool.query(updateQuery, [imageUrl, userId]);
    
    if (result.rows.length === 0) {
      console.error('‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ');
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    console.log('‚úÖ SQL –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É profile_images –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      const checkTableQuery = `
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = 'profile_images'
        );
      `;
      const tableExists = await pool.query(checkTableQuery);
      
      if (tableExists.rows[0].exists) {
        const checkResult = await pool.query(
          'SELECT id FROM profile_images WHERE user_id = $1',
          [userId]
        );
        
        if (checkResult.rows.length > 0) {
          await pool.query(
            'UPDATE profile_images SET url = $1, updated_at = CURRENT_TIMESTAMP WHERE user_id = $2',
            [imageUrl, userId]
          );
        } else {
          await pool.query(
            'INSERT INTO profile_images (user_id, url, created_at, updated_at) VALUES ($1, $2, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)',
            [userId, imageUrl]
          );
        }
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ profile_images –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      } else {
        console.log('‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ profile_images –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      }
    } catch (profileImageError) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è profile_images (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', profileImageError.message);
    }
    
    const updatedUser = result.rows[0];
    
    console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:', {
      userId,
      imageUrl,
      filename: req.file.filename,
      updatedUser
    });
    
    res.json({
      success: true,
      message: '–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞',
      imageUrl: imageUrl,
      filename: req.file.filename,
      user: updatedUser
    });
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∫–∏:', error);
    console.error('‚ùå Stack trace:', error.stack);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      name: error.name,
      message: error.message,
      code: error.code,
      detail: error.detail,
      hint: error.hint
    });
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    if (req.file && req.file.path) {
      try {
        fs.unlinkSync(req.file.path);
        console.log('üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', req.file.path);
      } catch (unlinkError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', unlinkError);
      }
    }
    
    res.status(500).json({ 
      success: false, 
      message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      error: process.env.NODE_ENV === 'development' ? error.message : 'Internal Server Error',
      details: process.env.NODE_ENV === 'development' ? {
        stack: error.stack,
        code: error.code,
        detail: error.detail
      } : undefined
    });
  }
});

module.exports = router;
